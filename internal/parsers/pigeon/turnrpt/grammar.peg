// pigeon grammar for turn report

{
package parser

import (
    //"bytes"
    "fmt"
	//"strings"
	"strconv"
)

func atoi(o any) (int, error) {
    if s, ok := o.(string); ok {
        return strconv.Atoi(s)
    }
    return 0, fmt.Errorf("invalid integer")
}

}

ReportFile <- rptsi:UnitReport* rest:REST EOF {
    var rpt Report

    rpts := rptsi.([]any)
    for _, r := range rpts {
        switch v := r.(type) {
        case *TribeReport:
            rpt.T = append(rpt.T, v)
        default:
            rpt.T = append(rpt.T, &TribeReport{Errors: []error{fmt.Errorf("unknown type %T", v)}})
        }
    }

    rpt.Rest = rest.(string)

    return &rpt, nil
}

UnitReport <- ("Tribe" / "Courier" / "Element") _ id:UNITID
 _ commonHeadingi:CommonHeading
 _ ClanHeading?
 _ goodsTribe:GoodsTribe
 _ DesiredCommodities?
 _ gmNotes:GMNotes?
 _ tact:TribeActivities
 _ fact:FinalActivities
 _ tmove:TribeMovement
 _ smove:ScoutMovement?
 _ status:UnitStatus
 _ people:Humans
 _ possessions:Possessions?
 _ skills:Skills
 _ morale:Morale
 _ weight:Weight
 _ truces:Truces?
 _ b:BLEET FF {
    var t TribeReport
    t.Id = id.(string)
    t.Bleet = b.(string)

    commonHeading := commonHeadingi.(*CommonHeading)
    t.Turn = commonHeading.Turn
    t.CurrentHex = commonHeading.CurrentHex
    t.StartingHex = commonHeading.StartingHex

    t.GoodsTribe = goodsTribe.(string)
    if gmNotes != nil {
        t.GMNotes = gmNotes.(string)
    }
    t.TribeActivities = tact.(*TribeActivities)
    t.FinalActivities = fact.(*FinalActivities)
    t.TribeMovement = tmove.(*TribeMovement)
    if smove != nil {
        t.ScoutMovement = smove.(*ScoutMovement)
    }
    t.UnitStatus = status.(*UnitStatus)
    t.People = people.(*People)
    if possessions != nil {
        t.Possessions = possessions.(*Possessions)
    }
    t.Skills = skills.(*Skills)
    t.Morale = morale.(*Morale)
    t.Weight = weight.(*Weight)
    if truces != nil {
        t.Truces = truces.(*Truces)
    }

    return &t, nil
}

CommonHeading <-
 _ ',' _ ',' _ "Current Hex" _ '=' _ currentHex:HEXID _ ',' _ '(' _ "Previous Hex" _ '=' _ startingHex:HEXID _ ')'
 _ "Current Turn" _ turn:TURNID _ '(' _ MONTHID _ ')' _ ',' _ SEASON _ ',' _ WEATHER
{
    var o CommonHeading
    o.CurrentHex = currentHex.(string)
    o.StartingHex = startingHex.(string)
    o.Turn = turn.(string)
    return &o, nil
}

ClanHeading <-
    _ "Next Turn" _ TURNID _ '(' _ MONTHID _ ')' _ ',' _ DDMMYYYY
    _ "Received:" _ '$' _ NUMBER _ ',' _ "Cost:" _ '$' _ NUMBER _ "Credit:" _ '$' _ NUMBER
{
    return string(c.text), nil
}

GoodsTribe <- "Goods Tribe:" _ id:("No GT" / TRIBEID) {
    switch v := id.(type) {
    case []uint8:
        if bytes.Equal(v, []byte("No GT")) {
            return "", nil
        }
        return string(v), nil
    case string:
        if v == "No GT" {
            return "", nil
        }
        return v, nil
    default:
        return id, fmt.Errorf("unknown type %T", v)
    }
}

DesiredCommodities <- "Desired Commodities:" _ "(1)" _ c1:COMMODITY _ ',' _ "(2)" _ c2:COMMODITY {
    s1 := c1.(string)
    s2 := c2.(string)
    return []string{s1, s2}, nil
}

GMNotes <- (!"Tribe Activities:" .)* &"Tribe Activities:" {
    return strings.TrimSpace(string(c.text)), nil
}

TribeActivities <- "Tribe Activities:" (!"Final Activities:" .)* {
    var t TribeActivities
    t.Bleet = string(c.text)
    return &t, nil
}

FinalActivities <- "Final Activities:" _ bleet:untilTribeMovement {
    var t FinalActivities
    t.Bleet = bleet.(string)
    return &t, nil
}

untilTribeMovement <- (!("Tribe Follows" / "Tribe Movement:") .)* {
    return string(c.text), nil
}

TribeMovement <- "Tribe Movement:" _ bleet:untilStatusOrScout {
    var t TribeMovement
    t.Bleet = bleet.(string)
    return &t, nil
} / "Tribe Follows" _ id:UNITID bleet:untilStatusOrScout {
    var t TribeMovement
    t.Follows = id.(string)
    t.Bleet = bleet.(string)
    return &t, nil
}

untilStatusOrScout <- (!((UNITID _ "Status:") / "Scout 1:") .)* {
    return string(c.text), nil
}

ScoutMovement <- "Scout 1:" (!(UNITID _ "Status:") .)* {
    var t ScoutMovement
    t.Bleet = string(c.text)
    return &t, nil
}

UnitStatus <- id:UNITID _ "Status:" _ terrain:Terrain _ bleet:untilHumans {
    var o UnitStatus
    o.Id = id.(string)
    o.Terrain = terrain.(string)
    o.Bleet = bleet.(string)
    return &o, nil
}

untilHumans <- (!"Humans" .)* {
    return string(c.text), nil
}

Terrain <-    (
    "CONIFER HILLS" /
    "GRASSY HILLS"  /
    "OCEAN"         /
    "PRAIRIE"       /
    "ROCKY HILLS"   /
    "RIVER"         /
    "SWAMP"         /
    "CH" / "GH" / "O" / "PR" / "RH" / "R" / "SW"
) {
    s := string(c.text)
    switch s {
    case "CH", "CONIFER HILLS":
        return "CH", nil
    case "GH", "GRASSY HILLS":
        return "GH", nil
    case "O", "OCEAN", "Ocean":
        return "O", nil
    case "PR", "PRAIRIE":
        return "PR", nil
    case "R", "RIVER":
        return "R", nil
    case "RH", "ROCKY HILLS":
        return "RH", nil
    case "SW", "SWAMP":
        return "SW", nil
    default:
        return string(c.text), fmt.Errorf("unknown terrain")
    }
}

Humans <- "Humans" _
  "People" _ totalPeople:NUMBER _
  "Warriors" _ warriors:NUMBER _
  "Actives" _ active:NUMBER _
  "Inactives" _ inactive:NUMBER
  SPACE* "\n\n"
{
    var o People
    total, err := atoi(totalPeople.(string))
    if o.Warriors, err = atoi(warriors.(string)); err != nil {
        return &o, err
    }
    if o.Active, err = atoi(active.(string)); err != nil {
        return &o, err
    }
    if o.Inactive, err = atoi(inactive.(string)); err != nil {
        return &o, err
    }
    if o.Warriors + o.Active + o.Inactive != total {
        return &o, fmt.Errorf("totals does not match")
    }
    return &o, nil
}

Possessions <- animals:Animals minerals:Minerals warEquipment:WarEquipment finishedGoods:FinishedGoods rawMaterials:RawMaterials ships:Ships {
    var o Possessions
    o.Animals = animals.(*Animals)
    o.Minerals = minerals.(*Minerals)
    o.WarEquipment = warEquipment.(*WarEquipment)
    o.FinishedGoods = finishedGoods.(*FinishedGoods)
    o.RawMaterials = rawMaterials.(*RawMaterials)
    o.Ships = ships.(*Ships)
    return &o, nil
}

Animals <- "Animals" (!"Minerals" .)* {
    var o Animals
    o.Bleet = string(c.text)
    return &o, nil
}

Minerals <- "Minerals" (!"War Equipment" .)* {
    var o Minerals
    o.Bleet = string(c.text)
    return &o, nil
}

WarEquipment <- "War Equipment" (!"Finished Goods" .)* {
    var o WarEquipment
    o.Bleet = string(c.text)
    return &o, nil
}

FinishedGoods <- "Finished Goods" (!"Raw Materials" .)* {
    var o FinishedGoods
    o.Bleet = string(c.text)
    return &o, nil
}

RawMaterials <- "Raw Materials" (!"Ships" .)* {
    var o RawMaterials
    o.Bleet = string(c.text)
    return &o, nil
}

Ships <- "Ships" (!"Skills:" .)* {
    var o Ships
    o.Bleet = string(c.text)
    return &o, nil
}

Skills <- "Skills:" (!"Morale :" .)* {
    var o Skills
    o.Bleet = string(c.text)
    return &o, nil
}

Morale <- "Morale :" (!"Weight:" .)* {
    var o Morale
    o.Bleet = string(c.text)
    return &o, nil
}

Weight <- "Weight:" (!(FF / "Truces :") .)* {
    var o Weight
    o.Bleet = string(c.text)
    return &o, nil
}

Truces <- "Truces :" (!FF .)* {
    var o Truces
    o.Bleet = string(c.text)
    return &o, nil
}

Transfers <- "Transfers" (!FF .)* {
    var o Transfers
    o.Bleet = string(c.text)
    return &o, nil
}

Settlements <- "Settlements" (!FF .)* {
    var o Settlements
    o.Bleet = string(c.text)
    return &o, nil
}

// TERMINALS

DIGIT = [0-9]
EOF = !.
FF = '\f'
SPACE = [ \t]
STARTACTIVITIES = "Tribe Activities:" / "Final Activities"
UPPER = [A-Z]

BLEET <- (!FF .)* &FF {
    bleet := string(c.text)
    return bleet, nil
}

COMMODITY <- "coffee"i {
    return string(c.text), nil
} / "frankincense"i {
    return string(c.text), nil
}

COURIERID <- DIGIT DIGIT DIGIT DIGIT 'c' DIGIT {
    return string(c.text), nil
}

DDMMYYYY <- DIGIT DIGIT? '/' DIGIT DIGIT? '/' DIGIT DIGIT DIGIT DIGIT {
    return string(c.text), nil
}

ELEMENTID <- DIGIT DIGIT DIGIT DIGIT 'e' DIGIT {
    return string(c.text), nil
}

HEXID <- UPPER UPPER ' ' DIGIT DIGIT DIGIT DIGIT {
    return string(c.text), nil
}

MONTHID <- '#' DIGIT DIGIT? {
    return string(c.text[1:]), nil
}

NUMBER <- DIGIT+ ('.' DIGIT+)? {
    return string(c.text), nil
}

REST <- .* {
    rest := string(c.text)
    return rest, nil
}

SEASON <- "Spring" / "Summer" / "Winter" {
    return string(c.text), nil
}

TRIBEID <- DIGIT DIGIT DIGIT DIGIT {
    return string(c.text), nil
}

TURNID <- DIGIT DIGIT DIGIT '-' DIGIT DIGIT {
    return string(c.text), nil
}

UNITID <- DIGIT DIGIT DIGIT DIGIT ([ce] DIGIT)? {
    return string(c.text), nil
}

WEATHER <- "FINE" {
    return string(c.text), nil
}

_ = [ \t\r\n]*
