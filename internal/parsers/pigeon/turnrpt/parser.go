// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	//"bytes"
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
	//"strings"
	"strconv"
)

func atoi(o any) (int, error) {
	if s, ok := o.(string); ok {
		return strconv.Atoi(s)
	}
	return 0, fmt.Errorf("invalid integer")
}

var g = &grammar{
	rules: []*rule{
		{
			name: "ReportFile",
			pos:  position{line: 22, col: 1, offset: 265},
			expr: &actionExpr{
				pos: position{line: 22, col: 15, offset: 279},
				run: (*parser).callonReportFile1,
				expr: &seqExpr{
					pos: position{line: 22, col: 15, offset: 279},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 22, col: 15, offset: 279},
							label: "rptsi",
							expr: &zeroOrMoreExpr{
								pos: position{line: 22, col: 21, offset: 285},
								expr: &ruleRefExpr{
									pos:  position{line: 22, col: 21, offset: 285},
									name: "UnitReport",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 22, col: 33, offset: 297},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 22, col: 38, offset: 302},
								name: "REST",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 22, col: 43, offset: 307},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "UnitReport",
			pos:  position{line: 40, col: 1, offset: 670},
			expr: &actionExpr{
				pos: position{line: 40, col: 15, offset: 684},
				run: (*parser).callonUnitReport1,
				expr: &seqExpr{
					pos: position{line: 40, col: 15, offset: 684},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 40, col: 16, offset: 685},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 40, col: 16, offset: 685},
									val:        "Tribe",
									ignoreCase: false,
									want:       "\"Tribe\"",
								},
								&litMatcher{
									pos:        position{line: 40, col: 26, offset: 695},
									val:        "Courier",
									ignoreCase: false,
									want:       "\"Courier\"",
								},
								&litMatcher{
									pos:        position{line: 40, col: 38, offset: 707},
									val:        "Element",
									ignoreCase: false,
									want:       "\"Element\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 40, col: 49, offset: 718},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 40, col: 51, offset: 720},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 40, col: 54, offset: 723},
								name: "UNITID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 2, offset: 731},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 41, col: 4, offset: 733},
							label: "commonHeadingi",
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 19, offset: 748},
								name: "CommonHeading",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 2, offset: 763},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 42, col: 4, offset: 765},
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 4, offset: 765},
								name: "ClanHeading",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 43, col: 2, offset: 779},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 43, col: 4, offset: 781},
							label: "goodsTribe",
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 15, offset: 792},
								name: "GoodsTribe",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 2, offset: 804},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 44, col: 4, offset: 806},
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 4, offset: 806},
								name: "DesiredCommodities",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 2, offset: 827},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 45, col: 4, offset: 829},
							label: "gmNotes",
							expr: &zeroOrOneExpr{
								pos: position{line: 45, col: 12, offset: 837},
								expr: &ruleRefExpr{
									pos:  position{line: 45, col: 12, offset: 837},
									name: "GMNotes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 2, offset: 847},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 46, col: 4, offset: 849},
							label: "tact",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 9, offset: 854},
								name: "TribeActivities",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 47, col: 2, offset: 871},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 47, col: 4, offset: 873},
							label: "fact",
							expr: &ruleRefExpr{
								pos:  position{line: 47, col: 9, offset: 878},
								name: "FinalActivities",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 2, offset: 895},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 4, offset: 897},
							label: "tmove",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 10, offset: 903},
								name: "TribeMovement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 49, col: 2, offset: 918},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 49, col: 4, offset: 920},
							label: "smove",
							expr: &zeroOrOneExpr{
								pos: position{line: 49, col: 10, offset: 926},
								expr: &ruleRefExpr{
									pos:  position{line: 49, col: 10, offset: 926},
									name: "ScoutMovement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 2, offset: 942},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 50, col: 4, offset: 944},
							label: "status",
							expr: &ruleRefExpr{
								pos:  position{line: 50, col: 11, offset: 951},
								name: "UnitStatus",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 51, col: 2, offset: 963},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 51, col: 4, offset: 965},
							label: "people",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 11, offset: 972},
								name: "Humans",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 52, col: 2, offset: 980},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 52, col: 4, offset: 982},
							label: "possessions",
							expr: &zeroOrOneExpr{
								pos: position{line: 52, col: 16, offset: 994},
								expr: &ruleRefExpr{
									pos:  position{line: 52, col: 16, offset: 994},
									name: "Possessions",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 2, offset: 1008},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 4, offset: 1010},
							label: "skills",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 11, offset: 1017},
								name: "Skills",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 54, col: 2, offset: 1025},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 54, col: 4, offset: 1027},
							label: "morale",
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 11, offset: 1034},
								name: "Morale",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 55, col: 2, offset: 1042},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 55, col: 4, offset: 1044},
							label: "weight",
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 11, offset: 1051},
								name: "Weight",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 2, offset: 1059},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 4, offset: 1061},
							label: "truces",
							expr: &zeroOrOneExpr{
								pos: position{line: 56, col: 11, offset: 1068},
								expr: &ruleRefExpr{
									pos:  position{line: 56, col: 11, offset: 1068},
									name: "Truces",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 2, offset: 1077},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 4, offset: 1079},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 57, col: 6, offset: 1081},
								name: "BLEET",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 12, offset: 1087},
							name: "FF",
						},
					},
				},
			},
		},
		{
			name: "CommonHeading",
			pos:  position{line: 92, col: 1, offset: 2004},
			expr: &actionExpr{
				pos: position{line: 93, col: 2, offset: 2022},
				run: (*parser).callonCommonHeading1,
				expr: &seqExpr{
					pos: position{line: 93, col: 2, offset: 2022},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 93, col: 2, offset: 2022},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 4, offset: 2024},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 8, offset: 2028},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 10, offset: 2030},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 14, offset: 2034},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 16, offset: 2036},
							val:        "Current Hex",
							ignoreCase: false,
							want:       "\"Current Hex\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 30, offset: 2050},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 32, offset: 2052},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 36, offset: 2056},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 93, col: 38, offset: 2058},
							label: "currentHex",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 49, offset: 2069},
								name: "HEXID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 55, offset: 2075},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 57, offset: 2077},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 61, offset: 2081},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 63, offset: 2083},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 67, offset: 2087},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 69, offset: 2089},
							val:        "Previous Hex",
							ignoreCase: false,
							want:       "\"Previous Hex\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 84, offset: 2104},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 86, offset: 2106},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 90, offset: 2110},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 93, col: 92, offset: 2112},
							label: "startingHex",
							expr: &ruleRefExpr{
								pos:  position{line: 93, col: 104, offset: 2124},
								name: "HEXID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 93, col: 110, offset: 2130},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 93, col: 112, offset: 2132},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 2, offset: 2137},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 94, col: 4, offset: 2139},
							val:        "Current Turn",
							ignoreCase: false,
							want:       "\"Current Turn\"",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 19, offset: 2154},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 94, col: 21, offset: 2156},
							label: "turn",
							expr: &ruleRefExpr{
								pos:  position{line: 94, col: 26, offset: 2161},
								name: "TURNID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 33, offset: 2168},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 94, col: 35, offset: 2170},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 39, offset: 2174},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 41, offset: 2176},
							name: "MONTHID",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 49, offset: 2184},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 94, col: 51, offset: 2186},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 55, offset: 2190},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 94, col: 57, offset: 2192},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 61, offset: 2196},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 63, offset: 2198},
							name: "SEASON",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 70, offset: 2205},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 94, col: 72, offset: 2207},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 76, offset: 2211},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 94, col: 78, offset: 2213},
							name: "WEATHER",
						},
					},
				},
			},
		},
		{
			name: "ClanHeading",
			pos:  position{line: 103, col: 1, offset: 2376},
			expr: &actionExpr{
				pos: position{line: 104, col: 5, offset: 2395},
				run: (*parser).callonClanHeading1,
				expr: &seqExpr{
					pos: position{line: 104, col: 5, offset: 2395},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 104, col: 5, offset: 2395},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 104, col: 7, offset: 2397},
							val:        "Next Turn",
							ignoreCase: false,
							want:       "\"Next Turn\"",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 19, offset: 2409},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 21, offset: 2411},
							name: "TURNID",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 28, offset: 2418},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 104, col: 30, offset: 2420},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 34, offset: 2424},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 36, offset: 2426},
							name: "MONTHID",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 44, offset: 2434},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 104, col: 46, offset: 2436},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 50, offset: 2440},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 104, col: 52, offset: 2442},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 56, offset: 2446},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 104, col: 58, offset: 2448},
							name: "DDMMYYYY",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 5, offset: 2461},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 105, col: 7, offset: 2463},
							val:        "Received:",
							ignoreCase: false,
							want:       "\"Received:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 19, offset: 2475},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 105, col: 21, offset: 2477},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 25, offset: 2481},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 27, offset: 2483},
							name: "NUMBER",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 34, offset: 2490},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 105, col: 36, offset: 2492},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 40, offset: 2496},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 105, col: 42, offset: 2498},
							val:        "Cost:",
							ignoreCase: false,
							want:       "\"Cost:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 50, offset: 2506},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 105, col: 52, offset: 2508},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 56, offset: 2512},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 58, offset: 2514},
							name: "NUMBER",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 65, offset: 2521},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 105, col: 67, offset: 2523},
							val:        "Credit:",
							ignoreCase: false,
							want:       "\"Credit:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 77, offset: 2533},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 105, col: 79, offset: 2535},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 83, offset: 2539},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 105, col: 85, offset: 2541},
							name: "NUMBER",
						},
					},
				},
			},
		},
		{
			name: "GoodsTribe",
			pos:  position{line: 110, col: 1, offset: 2584},
			expr: &actionExpr{
				pos: position{line: 110, col: 15, offset: 2598},
				run: (*parser).callonGoodsTribe1,
				expr: &seqExpr{
					pos: position{line: 110, col: 15, offset: 2598},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 110, col: 15, offset: 2598},
							val:        "Goods Tribe:",
							ignoreCase: false,
							want:       "\"Goods Tribe:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 110, col: 30, offset: 2613},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 110, col: 32, offset: 2615},
							label: "id",
							expr: &choiceExpr{
								pos: position{line: 110, col: 36, offset: 2619},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 110, col: 36, offset: 2619},
										val:        "No GT",
										ignoreCase: false,
										want:       "\"No GT\"",
									},
									&ruleRefExpr{
										pos:  position{line: 110, col: 46, offset: 2629},
										name: "TRIBEID",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DesiredCommodities",
			pos:  position{line: 127, col: 1, offset: 2974},
			expr: &actionExpr{
				pos: position{line: 127, col: 23, offset: 2996},
				run: (*parser).callonDesiredCommodities1,
				expr: &seqExpr{
					pos: position{line: 127, col: 23, offset: 2996},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 127, col: 23, offset: 2996},
							val:        "Desired Commodities:",
							ignoreCase: false,
							want:       "\"Desired Commodities:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 46, offset: 3019},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 127, col: 48, offset: 3021},
							val:        "(1)",
							ignoreCase: false,
							want:       "\"(1)\"",
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 54, offset: 3027},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 56, offset: 3029},
							label: "c1",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 59, offset: 3032},
								name: "COMMODITY",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 69, offset: 3042},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 127, col: 71, offset: 3044},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 75, offset: 3048},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 127, col: 77, offset: 3050},
							val:        "(2)",
							ignoreCase: false,
							want:       "\"(2)\"",
						},
						&ruleRefExpr{
							pos:  position{line: 127, col: 83, offset: 3056},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 127, col: 85, offset: 3058},
							label: "c2",
							expr: &ruleRefExpr{
								pos:  position{line: 127, col: 88, offset: 3061},
								name: "COMMODITY",
							},
						},
					},
				},
			},
		},
		{
			name: "GMNotes",
			pos:  position{line: 133, col: 1, offset: 3153},
			expr: &actionExpr{
				pos: position{line: 133, col: 12, offset: 3164},
				run: (*parser).callonGMNotes1,
				expr: &seqExpr{
					pos: position{line: 133, col: 12, offset: 3164},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 133, col: 12, offset: 3164},
							expr: &seqExpr{
								pos: position{line: 133, col: 13, offset: 3165},
								exprs: []any{
									&notExpr{
										pos: position{line: 133, col: 13, offset: 3165},
										expr: &litMatcher{
											pos:        position{line: 133, col: 14, offset: 3166},
											val:        "Tribe Activities:",
											ignoreCase: false,
											want:       "\"Tribe Activities:\"",
										},
									},
									&anyMatcher{
										line: 133, col: 34, offset: 3186,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 133, col: 38, offset: 3190},
							expr: &litMatcher{
								pos:        position{line: 133, col: 39, offset: 3191},
								val:        "Tribe Activities:",
								ignoreCase: false,
								want:       "\"Tribe Activities:\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TribeActivities",
			pos:  position{line: 137, col: 1, offset: 3266},
			expr: &actionExpr{
				pos: position{line: 137, col: 20, offset: 3285},
				run: (*parser).callonTribeActivities1,
				expr: &seqExpr{
					pos: position{line: 137, col: 20, offset: 3285},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 137, col: 20, offset: 3285},
							val:        "Tribe Activities:",
							ignoreCase: false,
							want:       "\"Tribe Activities:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 40, offset: 3305},
							expr: &seqExpr{
								pos: position{line: 137, col: 41, offset: 3306},
								exprs: []any{
									&notExpr{
										pos: position{line: 137, col: 41, offset: 3306},
										expr: &litMatcher{
											pos:        position{line: 137, col: 42, offset: 3307},
											val:        "Final Activities:",
											ignoreCase: false,
											want:       "\"Final Activities:\"",
										},
									},
									&anyMatcher{
										line: 137, col: 62, offset: 3327,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FinalActivities",
			pos:  position{line: 143, col: 1, offset: 3410},
			expr: &actionExpr{
				pos: position{line: 143, col: 20, offset: 3429},
				run: (*parser).callonFinalActivities1,
				expr: &seqExpr{
					pos: position{line: 143, col: 20, offset: 3429},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 143, col: 20, offset: 3429},
							val:        "Final Activities:",
							ignoreCase: false,
							want:       "\"Final Activities:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 143, col: 40, offset: 3449},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 143, col: 42, offset: 3451},
							label: "bleet",
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 48, offset: 3457},
								name: "untilTribeMovement",
							},
						},
					},
				},
			},
		},
		{
			name: "untilTribeMovement",
			pos:  position{line: 149, col: 1, offset: 3555},
			expr: &actionExpr{
				pos: position{line: 149, col: 23, offset: 3577},
				run: (*parser).callonuntilTribeMovement1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 149, col: 23, offset: 3577},
					expr: &seqExpr{
						pos: position{line: 149, col: 24, offset: 3578},
						exprs: []any{
							&notExpr{
								pos: position{line: 149, col: 24, offset: 3578},
								expr: &choiceExpr{
									pos: position{line: 149, col: 26, offset: 3580},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 149, col: 26, offset: 3580},
											val:        "Tribe Follows",
											ignoreCase: false,
											want:       "\"Tribe Follows\"",
										},
										&litMatcher{
											pos:        position{line: 149, col: 44, offset: 3598},
											val:        "Tribe Movement:",
											ignoreCase: false,
											want:       "\"Tribe Movement:\"",
										},
									},
								},
							},
							&anyMatcher{
								line: 149, col: 63, offset: 3617,
							},
						},
					},
				},
			},
		},
		{
			name: "TribeMovement",
			pos:  position{line: 153, col: 1, offset: 3657},
			expr: &choiceExpr{
				pos: position{line: 153, col: 18, offset: 3674},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 153, col: 18, offset: 3674},
						run: (*parser).callonTribeMovement2,
						expr: &seqExpr{
							pos: position{line: 153, col: 18, offset: 3674},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 153, col: 18, offset: 3674},
									val:        "Tribe Movement:",
									ignoreCase: false,
									want:       "\"Tribe Movement:\"",
								},
								&ruleRefExpr{
									pos:  position{line: 153, col: 36, offset: 3692},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 153, col: 38, offset: 3694},
									label: "bleet",
									expr: &ruleRefExpr{
										pos:  position{line: 153, col: 44, offset: 3700},
										name: "untilStatusOrScout",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 157, col: 5, offset: 3797},
						run: (*parser).callonTribeMovement8,
						expr: &seqExpr{
							pos: position{line: 157, col: 5, offset: 3797},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 157, col: 5, offset: 3797},
									val:        "Tribe Follows",
									ignoreCase: false,
									want:       "\"Tribe Follows\"",
								},
								&ruleRefExpr{
									pos:  position{line: 157, col: 21, offset: 3813},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 157, col: 23, offset: 3815},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 26, offset: 3818},
										name: "UNITID",
									},
								},
								&labeledExpr{
									pos:   position{line: 157, col: 33, offset: 3825},
									label: "bleet",
									expr: &ruleRefExpr{
										pos:  position{line: 157, col: 39, offset: 3831},
										name: "untilStatusOrScout",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "untilStatusOrScout",
			pos:  position{line: 164, col: 1, offset: 3955},
			expr: &actionExpr{
				pos: position{line: 164, col: 23, offset: 3977},
				run: (*parser).callonuntilStatusOrScout1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 164, col: 23, offset: 3977},
					expr: &seqExpr{
						pos: position{line: 164, col: 24, offset: 3978},
						exprs: []any{
							&notExpr{
								pos: position{line: 164, col: 24, offset: 3978},
								expr: &choiceExpr{
									pos: position{line: 164, col: 26, offset: 3980},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 164, col: 27, offset: 3981},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 164, col: 27, offset: 3981},
													name: "UNITID",
												},
												&ruleRefExpr{
													pos:  position{line: 164, col: 34, offset: 3988},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 164, col: 36, offset: 3990},
													val:        "Status:",
													ignoreCase: false,
													want:       "\"Status:\"",
												},
											},
										},
										&litMatcher{
											pos:        position{line: 164, col: 49, offset: 4003},
											val:        "Scout 1:",
											ignoreCase: false,
											want:       "\"Scout 1:\"",
										},
									},
								},
							},
							&anyMatcher{
								line: 164, col: 61, offset: 4015,
							},
						},
					},
				},
			},
		},
		{
			name: "ScoutMovement",
			pos:  position{line: 168, col: 1, offset: 4055},
			expr: &actionExpr{
				pos: position{line: 168, col: 18, offset: 4072},
				run: (*parser).callonScoutMovement1,
				expr: &seqExpr{
					pos: position{line: 168, col: 18, offset: 4072},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 168, col: 18, offset: 4072},
							val:        "Scout 1:",
							ignoreCase: false,
							want:       "\"Scout 1:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 168, col: 29, offset: 4083},
							expr: &seqExpr{
								pos: position{line: 168, col: 30, offset: 4084},
								exprs: []any{
									&notExpr{
										pos: position{line: 168, col: 30, offset: 4084},
										expr: &seqExpr{
											pos: position{line: 168, col: 32, offset: 4086},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 168, col: 32, offset: 4086},
													name: "UNITID",
												},
												&ruleRefExpr{
													pos:  position{line: 168, col: 39, offset: 4093},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 168, col: 41, offset: 4095},
													val:        "Status:",
													ignoreCase: false,
													want:       "\"Status:\"",
												},
											},
										},
									},
									&anyMatcher{
										line: 168, col: 52, offset: 4106,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnitStatus",
			pos:  position{line: 174, col: 1, offset: 4187},
			expr: &actionExpr{
				pos: position{line: 174, col: 15, offset: 4201},
				run: (*parser).callonUnitStatus1,
				expr: &seqExpr{
					pos: position{line: 174, col: 15, offset: 4201},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 174, col: 15, offset: 4201},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 18, offset: 4204},
								name: "UNITID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 174, col: 25, offset: 4211},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 174, col: 27, offset: 4213},
							val:        "Status:",
							ignoreCase: false,
							want:       "\"Status:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 174, col: 37, offset: 4223},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 39, offset: 4225},
							label: "terrain",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 47, offset: 4233},
								name: "Terrain",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 174, col: 55, offset: 4241},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 174, col: 57, offset: 4243},
							label: "bleet",
							expr: &ruleRefExpr{
								pos:  position{line: 174, col: 63, offset: 4249},
								name: "untilHumans",
							},
						},
					},
				},
			},
		},
		{
			name: "untilHumans",
			pos:  position{line: 182, col: 1, offset: 4391},
			expr: &actionExpr{
				pos: position{line: 182, col: 16, offset: 4406},
				run: (*parser).callonuntilHumans1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 182, col: 16, offset: 4406},
					expr: &seqExpr{
						pos: position{line: 182, col: 17, offset: 4407},
						exprs: []any{
							&notExpr{
								pos: position{line: 182, col: 17, offset: 4407},
								expr: &litMatcher{
									pos:        position{line: 182, col: 18, offset: 4408},
									val:        "Humans",
									ignoreCase: false,
									want:       "\"Humans\"",
								},
							},
							&anyMatcher{
								line: 182, col: 27, offset: 4417,
							},
						},
					},
				},
			},
		},
		{
			name: "Terrain",
			pos:  position{line: 186, col: 1, offset: 4457},
			expr: &actionExpr{
				pos: position{line: 186, col: 15, offset: 4471},
				run: (*parser).callonTerrain1,
				expr: &choiceExpr{
					pos: position{line: 187, col: 5, offset: 4477},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 187, col: 5, offset: 4477},
							val:        "CONIFER HILLS",
							ignoreCase: false,
							want:       "\"CONIFER HILLS\"",
						},
						&litMatcher{
							pos:        position{line: 188, col: 5, offset: 4499},
							val:        "GRASSY HILLS",
							ignoreCase: false,
							want:       "\"GRASSY HILLS\"",
						},
						&litMatcher{
							pos:        position{line: 189, col: 5, offset: 4521},
							val:        "OCEAN",
							ignoreCase: false,
							want:       "\"OCEAN\"",
						},
						&litMatcher{
							pos:        position{line: 190, col: 5, offset: 4543},
							val:        "PRAIRIE",
							ignoreCase: false,
							want:       "\"PRAIRIE\"",
						},
						&litMatcher{
							pos:        position{line: 191, col: 5, offset: 4565},
							val:        "ROCKY HILLS",
							ignoreCase: false,
							want:       "\"ROCKY HILLS\"",
						},
						&litMatcher{
							pos:        position{line: 192, col: 5, offset: 4587},
							val:        "RIVER",
							ignoreCase: false,
							want:       "\"RIVER\"",
						},
						&litMatcher{
							pos:        position{line: 193, col: 5, offset: 4609},
							val:        "SWAMP",
							ignoreCase: false,
							want:       "\"SWAMP\"",
						},
						&litMatcher{
							pos:        position{line: 194, col: 5, offset: 4631},
							val:        "CH",
							ignoreCase: false,
							want:       "\"CH\"",
						},
						&litMatcher{
							pos:        position{line: 194, col: 12, offset: 4638},
							val:        "GH",
							ignoreCase: false,
							want:       "\"GH\"",
						},
						&litMatcher{
							pos:        position{line: 194, col: 19, offset: 4645},
							val:        "O",
							ignoreCase: false,
							want:       "\"O\"",
						},
						&litMatcher{
							pos:        position{line: 194, col: 25, offset: 4651},
							val:        "PR",
							ignoreCase: false,
							want:       "\"PR\"",
						},
						&litMatcher{
							pos:        position{line: 194, col: 32, offset: 4658},
							val:        "RH",
							ignoreCase: false,
							want:       "\"RH\"",
						},
						&litMatcher{
							pos:        position{line: 194, col: 39, offset: 4665},
							val:        "R",
							ignoreCase: false,
							want:       "\"R\"",
						},
						&litMatcher{
							pos:        position{line: 194, col: 45, offset: 4671},
							val:        "SW",
							ignoreCase: false,
							want:       "\"SW\"",
						},
					},
				},
			},
		},
		{
			name: "Humans",
			pos:  position{line: 217, col: 1, offset: 5173},
			expr: &actionExpr{
				pos: position{line: 217, col: 11, offset: 5183},
				run: (*parser).callonHumans1,
				expr: &seqExpr{
					pos: position{line: 217, col: 11, offset: 5183},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 217, col: 11, offset: 5183},
							val:        "Humans",
							ignoreCase: false,
							want:       "\"Humans\"",
						},
						&ruleRefExpr{
							pos:  position{line: 217, col: 20, offset: 5192},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 218, col: 3, offset: 5196},
							val:        "People",
							ignoreCase: false,
							want:       "\"People\"",
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 12, offset: 5205},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 218, col: 14, offset: 5207},
							label: "totalPeople",
							expr: &ruleRefExpr{
								pos:  position{line: 218, col: 26, offset: 5219},
								name: "NUMBER",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 218, col: 33, offset: 5226},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 219, col: 3, offset: 5230},
							val:        "Warriors",
							ignoreCase: false,
							want:       "\"Warriors\"",
						},
						&ruleRefExpr{
							pos:  position{line: 219, col: 14, offset: 5241},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 219, col: 16, offset: 5243},
							label: "warriors",
							expr: &ruleRefExpr{
								pos:  position{line: 219, col: 25, offset: 5252},
								name: "NUMBER",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 219, col: 32, offset: 5259},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 220, col: 3, offset: 5263},
							val:        "Actives",
							ignoreCase: false,
							want:       "\"Actives\"",
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 13, offset: 5273},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 15, offset: 5275},
							label: "active",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 22, offset: 5282},
								name: "NUMBER",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 29, offset: 5289},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 221, col: 3, offset: 5293},
							val:        "Inactives",
							ignoreCase: false,
							want:       "\"Inactives\"",
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 15, offset: 5305},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 17, offset: 5307},
							label: "inactive",
							expr: &ruleRefExpr{
								pos:  position{line: 221, col: 26, offset: 5316},
								name: "NUMBER",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 222, col: 3, offset: 5325},
							expr: &ruleRefExpr{
								pos:  position{line: 222, col: 3, offset: 5325},
								name: "SPACE",
							},
						},
						&litMatcher{
							pos:        position{line: 222, col: 10, offset: 5332},
							val:        "\n\n",
							ignoreCase: false,
							want:       "\"\\n\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Possessions",
			pos:  position{line: 241, col: 1, offset: 5811},
			expr: &actionExpr{
				pos: position{line: 241, col: 16, offset: 5826},
				run: (*parser).callonPossessions1,
				expr: &seqExpr{
					pos: position{line: 241, col: 16, offset: 5826},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 241, col: 16, offset: 5826},
							label: "animals",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 24, offset: 5834},
								name: "Animals",
							},
						},
						&labeledExpr{
							pos:   position{line: 241, col: 32, offset: 5842},
							label: "minerals",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 41, offset: 5851},
								name: "Minerals",
							},
						},
						&labeledExpr{
							pos:   position{line: 241, col: 50, offset: 5860},
							label: "warEquipment",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 63, offset: 5873},
								name: "WarEquipment",
							},
						},
						&labeledExpr{
							pos:   position{line: 241, col: 76, offset: 5886},
							label: "finishedGoods",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 90, offset: 5900},
								name: "FinishedGoods",
							},
						},
						&labeledExpr{
							pos:   position{line: 241, col: 104, offset: 5914},
							label: "rawMaterials",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 117, offset: 5927},
								name: "RawMaterials",
							},
						},
						&labeledExpr{
							pos:   position{line: 241, col: 130, offset: 5940},
							label: "ships",
							expr: &ruleRefExpr{
								pos:  position{line: 241, col: 136, offset: 5946},
								name: "Ships",
							},
						},
					},
				},
			},
		},
		{
			name: "Animals",
			pos:  position{line: 252, col: 1, offset: 6253},
			expr: &actionExpr{
				pos: position{line: 252, col: 12, offset: 6264},
				run: (*parser).callonAnimals1,
				expr: &seqExpr{
					pos: position{line: 252, col: 12, offset: 6264},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 252, col: 12, offset: 6264},
							val:        "Animals",
							ignoreCase: false,
							want:       "\"Animals\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 252, col: 22, offset: 6274},
							expr: &seqExpr{
								pos: position{line: 252, col: 23, offset: 6275},
								exprs: []any{
									&notExpr{
										pos: position{line: 252, col: 23, offset: 6275},
										expr: &litMatcher{
											pos:        position{line: 252, col: 24, offset: 6276},
											val:        "Minerals",
											ignoreCase: false,
											want:       "\"Minerals\"",
										},
									},
									&anyMatcher{
										line: 252, col: 35, offset: 6287,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minerals",
			pos:  position{line: 258, col: 1, offset: 6362},
			expr: &actionExpr{
				pos: position{line: 258, col: 13, offset: 6374},
				run: (*parser).callonMinerals1,
				expr: &seqExpr{
					pos: position{line: 258, col: 13, offset: 6374},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 258, col: 13, offset: 6374},
							val:        "Minerals",
							ignoreCase: false,
							want:       "\"Minerals\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 258, col: 24, offset: 6385},
							expr: &seqExpr{
								pos: position{line: 258, col: 25, offset: 6386},
								exprs: []any{
									&notExpr{
										pos: position{line: 258, col: 25, offset: 6386},
										expr: &litMatcher{
											pos:        position{line: 258, col: 26, offset: 6387},
											val:        "War Equipment",
											ignoreCase: false,
											want:       "\"War Equipment\"",
										},
									},
									&anyMatcher{
										line: 258, col: 42, offset: 6403,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WarEquipment",
			pos:  position{line: 264, col: 1, offset: 6479},
			expr: &actionExpr{
				pos: position{line: 264, col: 17, offset: 6495},
				run: (*parser).callonWarEquipment1,
				expr: &seqExpr{
					pos: position{line: 264, col: 17, offset: 6495},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 264, col: 17, offset: 6495},
							val:        "War Equipment",
							ignoreCase: false,
							want:       "\"War Equipment\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 264, col: 33, offset: 6511},
							expr: &seqExpr{
								pos: position{line: 264, col: 34, offset: 6512},
								exprs: []any{
									&notExpr{
										pos: position{line: 264, col: 34, offset: 6512},
										expr: &litMatcher{
											pos:        position{line: 264, col: 35, offset: 6513},
											val:        "Finished Goods",
											ignoreCase: false,
											want:       "\"Finished Goods\"",
										},
									},
									&anyMatcher{
										line: 264, col: 52, offset: 6530,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FinishedGoods",
			pos:  position{line: 270, col: 1, offset: 6610},
			expr: &actionExpr{
				pos: position{line: 270, col: 18, offset: 6627},
				run: (*parser).callonFinishedGoods1,
				expr: &seqExpr{
					pos: position{line: 270, col: 18, offset: 6627},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 270, col: 18, offset: 6627},
							val:        "Finished Goods",
							ignoreCase: false,
							want:       "\"Finished Goods\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 35, offset: 6644},
							expr: &seqExpr{
								pos: position{line: 270, col: 36, offset: 6645},
								exprs: []any{
									&notExpr{
										pos: position{line: 270, col: 36, offset: 6645},
										expr: &litMatcher{
											pos:        position{line: 270, col: 37, offset: 6646},
											val:        "Raw Materials",
											ignoreCase: false,
											want:       "\"Raw Materials\"",
										},
									},
									&anyMatcher{
										line: 270, col: 53, offset: 6662,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawMaterials",
			pos:  position{line: 276, col: 1, offset: 6743},
			expr: &actionExpr{
				pos: position{line: 276, col: 17, offset: 6759},
				run: (*parser).callonRawMaterials1,
				expr: &seqExpr{
					pos: position{line: 276, col: 17, offset: 6759},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 276, col: 17, offset: 6759},
							val:        "Raw Materials",
							ignoreCase: false,
							want:       "\"Raw Materials\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 33, offset: 6775},
							expr: &seqExpr{
								pos: position{line: 276, col: 34, offset: 6776},
								exprs: []any{
									&notExpr{
										pos: position{line: 276, col: 34, offset: 6776},
										expr: &litMatcher{
											pos:        position{line: 276, col: 35, offset: 6777},
											val:        "Ships",
											ignoreCase: false,
											want:       "\"Ships\"",
										},
									},
									&anyMatcher{
										line: 276, col: 43, offset: 6785,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Ships",
			pos:  position{line: 282, col: 1, offset: 6865},
			expr: &actionExpr{
				pos: position{line: 282, col: 10, offset: 6874},
				run: (*parser).callonShips1,
				expr: &seqExpr{
					pos: position{line: 282, col: 10, offset: 6874},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 282, col: 10, offset: 6874},
							val:        "Ships",
							ignoreCase: false,
							want:       "\"Ships\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 282, col: 18, offset: 6882},
							expr: &seqExpr{
								pos: position{line: 282, col: 19, offset: 6883},
								exprs: []any{
									&notExpr{
										pos: position{line: 282, col: 19, offset: 6883},
										expr: &litMatcher{
											pos:        position{line: 282, col: 20, offset: 6884},
											val:        "Skills:",
											ignoreCase: false,
											want:       "\"Skills:\"",
										},
									},
									&anyMatcher{
										line: 282, col: 30, offset: 6894,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Skills",
			pos:  position{line: 288, col: 1, offset: 6967},
			expr: &actionExpr{
				pos: position{line: 288, col: 11, offset: 6977},
				run: (*parser).callonSkills1,
				expr: &seqExpr{
					pos: position{line: 288, col: 11, offset: 6977},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 288, col: 11, offset: 6977},
							val:        "Skills:",
							ignoreCase: false,
							want:       "\"Skills:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 288, col: 21, offset: 6987},
							expr: &seqExpr{
								pos: position{line: 288, col: 22, offset: 6988},
								exprs: []any{
									&notExpr{
										pos: position{line: 288, col: 22, offset: 6988},
										expr: &litMatcher{
											pos:        position{line: 288, col: 23, offset: 6989},
											val:        "Morale :",
											ignoreCase: false,
											want:       "\"Morale :\"",
										},
									},
									&anyMatcher{
										line: 288, col: 34, offset: 7000,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Morale",
			pos:  position{line: 294, col: 1, offset: 7074},
			expr: &actionExpr{
				pos: position{line: 294, col: 11, offset: 7084},
				run: (*parser).callonMorale1,
				expr: &seqExpr{
					pos: position{line: 294, col: 11, offset: 7084},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 294, col: 11, offset: 7084},
							val:        "Morale :",
							ignoreCase: false,
							want:       "\"Morale :\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 22, offset: 7095},
							expr: &seqExpr{
								pos: position{line: 294, col: 23, offset: 7096},
								exprs: []any{
									&notExpr{
										pos: position{line: 294, col: 23, offset: 7096},
										expr: &litMatcher{
											pos:        position{line: 294, col: 24, offset: 7097},
											val:        "Weight:",
											ignoreCase: false,
											want:       "\"Weight:\"",
										},
									},
									&anyMatcher{
										line: 294, col: 34, offset: 7107,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weight",
			pos:  position{line: 300, col: 1, offset: 7181},
			expr: &actionExpr{
				pos: position{line: 300, col: 11, offset: 7191},
				run: (*parser).callonWeight1,
				expr: &seqExpr{
					pos: position{line: 300, col: 11, offset: 7191},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 300, col: 11, offset: 7191},
							val:        "Weight:",
							ignoreCase: false,
							want:       "\"Weight:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 21, offset: 7201},
							expr: &seqExpr{
								pos: position{line: 300, col: 22, offset: 7202},
								exprs: []any{
									&notExpr{
										pos: position{line: 300, col: 22, offset: 7202},
										expr: &choiceExpr{
											pos: position{line: 300, col: 24, offset: 7204},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 300, col: 24, offset: 7204},
													name: "FF",
												},
												&litMatcher{
													pos:        position{line: 300, col: 29, offset: 7209},
													val:        "Truces :",
													ignoreCase: false,
													want:       "\"Truces :\"",
												},
											},
										},
									},
									&anyMatcher{
										line: 300, col: 41, offset: 7221,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Truces",
			pos:  position{line: 306, col: 1, offset: 7295},
			expr: &actionExpr{
				pos: position{line: 306, col: 11, offset: 7305},
				run: (*parser).callonTruces1,
				expr: &seqExpr{
					pos: position{line: 306, col: 11, offset: 7305},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 306, col: 11, offset: 7305},
							val:        "Truces :",
							ignoreCase: false,
							want:       "\"Truces :\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 22, offset: 7316},
							expr: &seqExpr{
								pos: position{line: 306, col: 23, offset: 7317},
								exprs: []any{
									&notExpr{
										pos: position{line: 306, col: 23, offset: 7317},
										expr: &ruleRefExpr{
											pos:  position{line: 306, col: 24, offset: 7318},
											name: "FF",
										},
									},
									&anyMatcher{
										line: 306, col: 27, offset: 7321,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Transfers",
			pos:  position{line: 312, col: 1, offset: 7395},
			expr: &actionExpr{
				pos: position{line: 312, col: 14, offset: 7408},
				run: (*parser).callonTransfers1,
				expr: &seqExpr{
					pos: position{line: 312, col: 14, offset: 7408},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 312, col: 14, offset: 7408},
							val:        "Transfers",
							ignoreCase: false,
							want:       "\"Transfers\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 312, col: 26, offset: 7420},
							expr: &seqExpr{
								pos: position{line: 312, col: 27, offset: 7421},
								exprs: []any{
									&notExpr{
										pos: position{line: 312, col: 27, offset: 7421},
										expr: &ruleRefExpr{
											pos:  position{line: 312, col: 28, offset: 7422},
											name: "FF",
										},
									},
									&anyMatcher{
										line: 312, col: 31, offset: 7425,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Settlements",
			pos:  position{line: 318, col: 1, offset: 7502},
			expr: &actionExpr{
				pos: position{line: 318, col: 16, offset: 7517},
				run: (*parser).callonSettlements1,
				expr: &seqExpr{
					pos: position{line: 318, col: 16, offset: 7517},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 318, col: 16, offset: 7517},
							val:        "Settlements",
							ignoreCase: false,
							want:       "\"Settlements\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 30, offset: 7531},
							expr: &seqExpr{
								pos: position{line: 318, col: 31, offset: 7532},
								exprs: []any{
									&notExpr{
										pos: position{line: 318, col: 31, offset: 7532},
										expr: &ruleRefExpr{
											pos:  position{line: 318, col: 32, offset: 7533},
											name: "FF",
										},
									},
									&anyMatcher{
										line: 318, col: 35, offset: 7536,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 326, col: 1, offset: 7629},
			expr: &charClassMatcher{
				pos:        position{line: 326, col: 9, offset: 7637},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EOF",
			pos:  position{line: 327, col: 1, offset: 7643},
			expr: &notExpr{
				pos: position{line: 327, col: 7, offset: 7649},
				expr: &anyMatcher{
					line: 327, col: 8, offset: 7650,
				},
			},
		},
		{
			name: "FF",
			pos:  position{line: 328, col: 1, offset: 7652},
			expr: &litMatcher{
				pos:        position{line: 328, col: 6, offset: 7657},
				val:        "\f",
				ignoreCase: false,
				want:       "\"\\f\"",
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 329, col: 1, offset: 7662},
			expr: &charClassMatcher{
				pos:        position{line: 329, col: 9, offset: 7670},
				val:        "[ \\t]",
				chars:      []rune{' ', '\t'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "STARTACTIVITIES",
			pos:  position{line: 330, col: 1, offset: 7676},
			expr: &choiceExpr{
				pos: position{line: 330, col: 19, offset: 7694},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 330, col: 19, offset: 7694},
						val:        "Tribe Activities:",
						ignoreCase: false,
						want:       "\"Tribe Activities:\"",
					},
					&litMatcher{
						pos:        position{line: 330, col: 41, offset: 7716},
						val:        "Final Activities",
						ignoreCase: false,
						want:       "\"Final Activities\"",
					},
				},
			},
		},
		{
			name: "UPPER",
			pos:  position{line: 331, col: 1, offset: 7735},
			expr: &charClassMatcher{
				pos:        position{line: 331, col: 9, offset: 7743},
				val:        "[A-Z]",
				ranges:     []rune{'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "BLEET",
			pos:  position{line: 333, col: 1, offset: 7750},
			expr: &actionExpr{
				pos: position{line: 333, col: 10, offset: 7759},
				run: (*parser).callonBLEET1,
				expr: &seqExpr{
					pos: position{line: 333, col: 10, offset: 7759},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 333, col: 10, offset: 7759},
							expr: &seqExpr{
								pos: position{line: 333, col: 11, offset: 7760},
								exprs: []any{
									&notExpr{
										pos: position{line: 333, col: 11, offset: 7760},
										expr: &ruleRefExpr{
											pos:  position{line: 333, col: 12, offset: 7761},
											name: "FF",
										},
									},
									&anyMatcher{
										line: 333, col: 15, offset: 7764,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 333, col: 19, offset: 7768},
							expr: &ruleRefExpr{
								pos:  position{line: 333, col: 20, offset: 7769},
								name: "FF",
							},
						},
					},
				},
			},
		},
		{
			name: "COMMODITY",
			pos:  position{line: 338, col: 1, offset: 7827},
			expr: &choiceExpr{
				pos: position{line: 338, col: 14, offset: 7840},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 338, col: 14, offset: 7840},
						run: (*parser).callonCOMMODITY2,
						expr: &litMatcher{
							pos:        position{line: 338, col: 14, offset: 7840},
							val:        "coffee",
							ignoreCase: true,
							want:       "\"coffee\"i",
						},
					},
					&actionExpr{
						pos: position{line: 340, col: 5, offset: 7887},
						run: (*parser).callonCOMMODITY4,
						expr: &litMatcher{
							pos:        position{line: 340, col: 5, offset: 7887},
							val:        "frankincense",
							ignoreCase: true,
							want:       "\"frankincense\"i",
						},
					},
				},
			},
		},
		{
			name: "COURIERID",
			pos:  position{line: 344, col: 1, offset: 7939},
			expr: &actionExpr{
				pos: position{line: 344, col: 14, offset: 7952},
				run: (*parser).callonCOURIERID1,
				expr: &seqExpr{
					pos: position{line: 344, col: 14, offset: 7952},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 344, col: 14, offset: 7952},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 20, offset: 7958},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 26, offset: 7964},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 32, offset: 7970},
							name: "DIGIT",
						},
						&litMatcher{
							pos:        position{line: 344, col: 38, offset: 7976},
							val:        "c",
							ignoreCase: false,
							want:       "\"c\"",
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 42, offset: 7980},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "DDMMYYYY",
			pos:  position{line: 348, col: 1, offset: 8022},
			expr: &actionExpr{
				pos: position{line: 348, col: 13, offset: 8034},
				run: (*parser).callonDDMMYYYY1,
				expr: &seqExpr{
					pos: position{line: 348, col: 13, offset: 8034},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 348, col: 13, offset: 8034},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 348, col: 19, offset: 8040},
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 19, offset: 8040},
								name: "DIGIT",
							},
						},
						&litMatcher{
							pos:        position{line: 348, col: 26, offset: 8047},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 30, offset: 8051},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 348, col: 36, offset: 8057},
							expr: &ruleRefExpr{
								pos:  position{line: 348, col: 36, offset: 8057},
								name: "DIGIT",
							},
						},
						&litMatcher{
							pos:        position{line: 348, col: 43, offset: 8064},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 47, offset: 8068},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 53, offset: 8074},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 59, offset: 8080},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 348, col: 65, offset: 8086},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "ELEMENTID",
			pos:  position{line: 352, col: 1, offset: 8128},
			expr: &actionExpr{
				pos: position{line: 352, col: 14, offset: 8141},
				run: (*parser).callonELEMENTID1,
				expr: &seqExpr{
					pos: position{line: 352, col: 14, offset: 8141},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 352, col: 14, offset: 8141},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 20, offset: 8147},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 26, offset: 8153},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 32, offset: 8159},
							name: "DIGIT",
						},
						&litMatcher{
							pos:        position{line: 352, col: 38, offset: 8165},
							val:        "e",
							ignoreCase: false,
							want:       "\"e\"",
						},
						&ruleRefExpr{
							pos:  position{line: 352, col: 42, offset: 8169},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "HEXID",
			pos:  position{line: 356, col: 1, offset: 8211},
			expr: &actionExpr{
				pos: position{line: 356, col: 10, offset: 8220},
				run: (*parser).callonHEXID1,
				expr: &seqExpr{
					pos: position{line: 356, col: 10, offset: 8220},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 356, col: 10, offset: 8220},
							name: "UPPER",
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 16, offset: 8226},
							name: "UPPER",
						},
						&litMatcher{
							pos:        position{line: 356, col: 22, offset: 8232},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 26, offset: 8236},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 32, offset: 8242},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 38, offset: 8248},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 356, col: 44, offset: 8254},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "MONTHID",
			pos:  position{line: 360, col: 1, offset: 8296},
			expr: &actionExpr{
				pos: position{line: 360, col: 12, offset: 8307},
				run: (*parser).callonMONTHID1,
				expr: &seqExpr{
					pos: position{line: 360, col: 12, offset: 8307},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 360, col: 12, offset: 8307},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&ruleRefExpr{
							pos:  position{line: 360, col: 16, offset: 8311},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 360, col: 22, offset: 8317},
							expr: &ruleRefExpr{
								pos:  position{line: 360, col: 22, offset: 8317},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 364, col: 1, offset: 8364},
			expr: &actionExpr{
				pos: position{line: 364, col: 11, offset: 8374},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 364, col: 11, offset: 8374},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 364, col: 11, offset: 8374},
							expr: &ruleRefExpr{
								pos:  position{line: 364, col: 11, offset: 8374},
								name: "DIGIT",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 364, col: 18, offset: 8381},
							expr: &seqExpr{
								pos: position{line: 364, col: 19, offset: 8382},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 364, col: 19, offset: 8382},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&oneOrMoreExpr{
										pos: position{line: 364, col: 23, offset: 8386},
										expr: &ruleRefExpr{
											pos:  position{line: 364, col: 23, offset: 8386},
											name: "DIGIT",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "REST",
			pos:  position{line: 368, col: 1, offset: 8431},
			expr: &actionExpr{
				pos: position{line: 368, col: 9, offset: 8439},
				run: (*parser).callonREST1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 368, col: 9, offset: 8439},
					expr: &anyMatcher{
						line: 368, col: 9, offset: 8439,
					},
				},
			},
		},
		{
			name: "SEASON",
			pos:  position{line: 373, col: 1, offset: 8495},
			expr: &choiceExpr{
				pos: position{line: 373, col: 11, offset: 8505},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 373, col: 11, offset: 8505},
						val:        "Spring",
						ignoreCase: false,
						want:       "\"Spring\"",
					},
					&litMatcher{
						pos:        position{line: 373, col: 22, offset: 8516},
						val:        "Summer",
						ignoreCase: false,
						want:       "\"Summer\"",
					},
					&actionExpr{
						pos: position{line: 373, col: 33, offset: 8527},
						run: (*parser).callonSEASON4,
						expr: &litMatcher{
							pos:        position{line: 373, col: 33, offset: 8527},
							val:        "Winter",
							ignoreCase: false,
							want:       "\"Winter\"",
						},
					},
				},
			},
		},
		{
			name: "TRIBEID",
			pos:  position{line: 377, col: 1, offset: 8572},
			expr: &actionExpr{
				pos: position{line: 377, col: 12, offset: 8583},
				run: (*parser).callonTRIBEID1,
				expr: &seqExpr{
					pos: position{line: 377, col: 12, offset: 8583},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 377, col: 12, offset: 8583},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 377, col: 18, offset: 8589},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 377, col: 24, offset: 8595},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 377, col: 30, offset: 8601},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "TURNID",
			pos:  position{line: 381, col: 1, offset: 8643},
			expr: &actionExpr{
				pos: position{line: 381, col: 11, offset: 8653},
				run: (*parser).callonTURNID1,
				expr: &seqExpr{
					pos: position{line: 381, col: 11, offset: 8653},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 381, col: 11, offset: 8653},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 17, offset: 8659},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 23, offset: 8665},
							name: "DIGIT",
						},
						&litMatcher{
							pos:        position{line: 381, col: 29, offset: 8671},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 33, offset: 8675},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 381, col: 39, offset: 8681},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "UNITID",
			pos:  position{line: 385, col: 1, offset: 8723},
			expr: &actionExpr{
				pos: position{line: 385, col: 11, offset: 8733},
				run: (*parser).callonUNITID1,
				expr: &seqExpr{
					pos: position{line: 385, col: 11, offset: 8733},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 385, col: 11, offset: 8733},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 17, offset: 8739},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 23, offset: 8745},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 385, col: 29, offset: 8751},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 385, col: 35, offset: 8757},
							expr: &seqExpr{
								pos: position{line: 385, col: 36, offset: 8758},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 385, col: 36, offset: 8758},
										val:        "[ce]",
										chars:      []rune{'c', 'e'},
										ignoreCase: false,
										inverted:   false,
									},
									&ruleRefExpr{
										pos:  position{line: 385, col: 41, offset: 8763},
										name: "DIGIT",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WEATHER",
			pos:  position{line: 389, col: 1, offset: 8807},
			expr: &actionExpr{
				pos: position{line: 389, col: 12, offset: 8818},
				run: (*parser).callonWEATHER1,
				expr: &litMatcher{
					pos:        position{line: 389, col: 12, offset: 8818},
					val:        "FINE",
					ignoreCase: false,
					want:       "\"FINE\"",
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 393, col: 1, offset: 8861},
			expr: &zeroOrMoreExpr{
				pos: position{line: 393, col: 5, offset: 8865},
				expr: &charClassMatcher{
					pos:        position{line: 393, col: 5, offset: 8865},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
	},
}

func (c *current) onReportFile1(rptsi, rest any) (any, error) {
	var rpt Report

	rpts := rptsi.([]any)
	for _, r := range rpts {
		switch v := r.(type) {
		case *TribeReport:
			rpt.T = append(rpt.T, v)
		default:
			rpt.T = append(rpt.T, &TribeReport{Errors: []error{fmt.Errorf("unknown type %T", v)}})
		}
	}

	rpt.Rest = rest.(string)

	return &rpt, nil
}

func (p *parser) callonReportFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReportFile1(stack["rptsi"], stack["rest"])
}

func (c *current) onUnitReport1(id, commonHeadingi, goodsTribe, gmNotes, tact, fact, tmove, smove, status, people, possessions, skills, morale, weight, truces, b any) (any, error) {
	var t TribeReport
	t.Id = id.(string)
	t.Bleet = b.(string)

	commonHeading := commonHeadingi.(*CommonHeading)
	t.Turn = commonHeading.Turn
	t.CurrentHex = commonHeading.CurrentHex
	t.StartingHex = commonHeading.StartingHex

	t.GoodsTribe = goodsTribe.(string)
	if gmNotes != nil {
		t.GMNotes = gmNotes.(string)
	}
	t.TribeActivities = tact.(*TribeActivities)
	t.FinalActivities = fact.(*FinalActivities)
	t.TribeMovement = tmove.(*TribeMovement)
	if smove != nil {
		t.ScoutMovement = smove.(*ScoutMovement)
	}
	t.UnitStatus = status.(*UnitStatus)
	t.People = people.(*People)
	if possessions != nil {
		t.Possessions = possessions.(*Possessions)
	}
	t.Skills = skills.(*Skills)
	t.Morale = morale.(*Morale)
	t.Weight = weight.(*Weight)
	if truces != nil {
		t.Truces = truces.(*Truces)
	}

	return &t, nil
}

func (p *parser) callonUnitReport1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnitReport1(stack["id"], stack["commonHeadingi"], stack["goodsTribe"], stack["gmNotes"], stack["tact"], stack["fact"], stack["tmove"], stack["smove"], stack["status"], stack["people"], stack["possessions"], stack["skills"], stack["morale"], stack["weight"], stack["truces"], stack["b"])
}

func (c *current) onCommonHeading1(currentHex, startingHex, turn any) (any, error) {
	var o CommonHeading
	o.CurrentHex = currentHex.(string)
	o.StartingHex = startingHex.(string)
	o.Turn = turn.(string)
	return &o, nil
}

func (p *parser) callonCommonHeading1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommonHeading1(stack["currentHex"], stack["startingHex"], stack["turn"])
}

func (c *current) onClanHeading1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonClanHeading1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClanHeading1()
}

func (c *current) onGoodsTribe1(id any) (any, error) {
	switch v := id.(type) {
	case []uint8:
		if bytes.Equal(v, []byte("No GT")) {
			return "", nil
		}
		return string(v), nil
	case string:
		if v == "No GT" {
			return "", nil
		}
		return v, nil
	default:
		return id, fmt.Errorf("unknown type %T", v)
	}
}

func (p *parser) callonGoodsTribe1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoodsTribe1(stack["id"])
}

func (c *current) onDesiredCommodities1(c1, c2 any) (any, error) {
	s1 := c1.(string)
	s2 := c2.(string)
	return []string{s1, s2}, nil
}

func (p *parser) callonDesiredCommodities1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDesiredCommodities1(stack["c1"], stack["c2"])
}

func (c *current) onGMNotes1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonGMNotes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGMNotes1()
}

func (c *current) onTribeActivities1() (any, error) {
	var t TribeActivities
	t.Bleet = string(c.text)
	return &t, nil
}

func (p *parser) callonTribeActivities1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeActivities1()
}

func (c *current) onFinalActivities1(bleet any) (any, error) {
	var t FinalActivities
	t.Bleet = bleet.(string)
	return &t, nil
}

func (p *parser) callonFinalActivities1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFinalActivities1(stack["bleet"])
}

func (c *current) onuntilTribeMovement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonuntilTribeMovement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuntilTribeMovement1()
}

func (c *current) onTribeMovement2(bleet any) (any, error) {
	var t TribeMovement
	t.Bleet = bleet.(string)
	return &t, nil
}

func (p *parser) callonTribeMovement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeMovement2(stack["bleet"])
}

func (c *current) onTribeMovement8(id, bleet any) (any, error) {
	var t TribeMovement
	t.Follows = id.(string)
	t.Bleet = bleet.(string)
	return &t, nil
}

func (p *parser) callonTribeMovement8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeMovement8(stack["id"], stack["bleet"])
}

func (c *current) onuntilStatusOrScout1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonuntilStatusOrScout1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuntilStatusOrScout1()
}

func (c *current) onScoutMovement1() (any, error) {
	var t ScoutMovement
	t.Bleet = string(c.text)
	return &t, nil
}

func (p *parser) callonScoutMovement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScoutMovement1()
}

func (c *current) onUnitStatus1(id, terrain, bleet any) (any, error) {
	var o UnitStatus
	o.Id = id.(string)
	o.Terrain = terrain.(string)
	o.Bleet = bleet.(string)
	return &o, nil
}

func (p *parser) callonUnitStatus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnitStatus1(stack["id"], stack["terrain"], stack["bleet"])
}

func (c *current) onuntilHumans1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonuntilHumans1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuntilHumans1()
}

func (c *current) onTerrain1() (any, error) {
	s := string(c.text)
	switch s {
	case "CH", "CONIFER HILLS":
		return "CH", nil
	case "GH", "GRASSY HILLS":
		return "GH", nil
	case "O", "OCEAN", "Ocean":
		return "O", nil
	case "PR", "PRAIRIE":
		return "PR", nil
	case "R", "RIVER":
		return "R", nil
	case "RH", "ROCKY HILLS":
		return "RH", nil
	case "SW", "SWAMP":
		return "SW", nil
	default:
		return string(c.text), fmt.Errorf("unknown terrain")
	}
}

func (p *parser) callonTerrain1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTerrain1()
}

func (c *current) onHumans1(totalPeople, warriors, active, inactive any) (any, error) {
	var o People
	total, err := atoi(totalPeople.(string))
	if o.Warriors, err = atoi(warriors.(string)); err != nil {
		return &o, err
	}
	if o.Active, err = atoi(active.(string)); err != nil {
		return &o, err
	}
	if o.Inactive, err = atoi(inactive.(string)); err != nil {
		return &o, err
	}
	if o.Warriors+o.Active+o.Inactive != total {
		return &o, fmt.Errorf("totals does not match")
	}
	return &o, nil
}

func (p *parser) callonHumans1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHumans1(stack["totalPeople"], stack["warriors"], stack["active"], stack["inactive"])
}

func (c *current) onPossessions1(animals, minerals, warEquipment, finishedGoods, rawMaterials, ships any) (any, error) {
	var o Possessions
	o.Animals = animals.(*Animals)
	o.Minerals = minerals.(*Minerals)
	o.WarEquipment = warEquipment.(*WarEquipment)
	o.FinishedGoods = finishedGoods.(*FinishedGoods)
	o.RawMaterials = rawMaterials.(*RawMaterials)
	o.Ships = ships.(*Ships)
	return &o, nil
}

func (p *parser) callonPossessions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPossessions1(stack["animals"], stack["minerals"], stack["warEquipment"], stack["finishedGoods"], stack["rawMaterials"], stack["ships"])
}

func (c *current) onAnimals1() (any, error) {
	var o Animals
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonAnimals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnimals1()
}

func (c *current) onMinerals1() (any, error) {
	var o Minerals
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonMinerals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinerals1()
}

func (c *current) onWarEquipment1() (any, error) {
	var o WarEquipment
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonWarEquipment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWarEquipment1()
}

func (c *current) onFinishedGoods1() (any, error) {
	var o FinishedGoods
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonFinishedGoods1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFinishedGoods1()
}

func (c *current) onRawMaterials1() (any, error) {
	var o RawMaterials
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonRawMaterials1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawMaterials1()
}

func (c *current) onShips1() (any, error) {
	var o Ships
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonShips1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShips1()
}

func (c *current) onSkills1() (any, error) {
	var o Skills
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonSkills1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSkills1()
}

func (c *current) onMorale1() (any, error) {
	var o Morale
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonMorale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMorale1()
}

func (c *current) onWeight1() (any, error) {
	var o Weight
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonWeight1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeight1()
}

func (c *current) onTruces1() (any, error) {
	var o Truces
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonTruces1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTruces1()
}

func (c *current) onTransfers1() (any, error) {
	var o Transfers
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonTransfers1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransfers1()
}

func (c *current) onSettlements1() (any, error) {
	var o Settlements
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonSettlements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSettlements1()
}

func (c *current) onBLEET1() (any, error) {
	bleet := string(c.text)
	return bleet, nil
}

func (p *parser) callonBLEET1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBLEET1()
}

func (c *current) onCOMMODITY2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOMMODITY2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMODITY2()
}

func (c *current) onCOMMODITY4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOMMODITY4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMODITY4()
}

func (c *current) onCOURIERID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOURIERID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOURIERID1()
}

func (c *current) onDDMMYYYY1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDDMMYYYY1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDDMMYYYY1()
}

func (c *current) onELEMENTID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonELEMENTID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onELEMENTID1()
}

func (c *current) onHEXID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonHEXID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHEXID1()
}

func (c *current) onMONTHID1() (any, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonMONTHID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMONTHID1()
}

func (c *current) onNUMBER1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNUMBER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onREST1() (any, error) {
	rest := string(c.text)
	return rest, nil
}

func (p *parser) callonREST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onREST1()
}

func (c *current) onSEASON4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSEASON4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSEASON4()
}

func (c *current) onTRIBEID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTRIBEID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTRIBEID1()
}

func (c *current) onTURNID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTURNID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTURNID1()
}

func (c *current) onUNITID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUNITID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNITID1()
}

func (c *current) onWEATHER1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWEATHER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWEATHER1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
