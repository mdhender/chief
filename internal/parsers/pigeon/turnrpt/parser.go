// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	//"bytes"
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
	//"log"
	//"strings"
	"strconv"
)

func atoi(o any) (int, error) {
	if s, ok := o.(string); ok {
		return strconv.Atoi(s)
	}
	return 0, fmt.Errorf("invalid integer")
}

var g = &grammar{
	rules: []*rule{
		{
			name: "ReportFile",
			pos:  position{line: 23, col: 1, offset: 277},
			expr: &actionExpr{
				pos: position{line: 23, col: 15, offset: 291},
				run: (*parser).callonReportFile1,
				expr: &seqExpr{
					pos: position{line: 23, col: 15, offset: 291},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 23, col: 15, offset: 291},
							label: "rptsi",
							expr: &zeroOrMoreExpr{
								pos: position{line: 23, col: 21, offset: 297},
								expr: &ruleRefExpr{
									pos:  position{line: 23, col: 21, offset: 297},
									name: "UnitReport",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 23, col: 33, offset: 309},
							label: "rest",
							expr: &ruleRefExpr{
								pos:  position{line: 23, col: 38, offset: 314},
								name: "REST",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 23, col: 43, offset: 319},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "UnitReport",
			pos:  position{line: 41, col: 1, offset: 682},
			expr: &actionExpr{
				pos: position{line: 41, col: 15, offset: 696},
				run: (*parser).callonUnitReport1,
				expr: &seqExpr{
					pos: position{line: 41, col: 15, offset: 696},
					exprs: []any{
						&choiceExpr{
							pos: position{line: 41, col: 16, offset: 697},
							alternatives: []any{
								&litMatcher{
									pos:        position{line: 41, col: 16, offset: 697},
									val:        "Tribe",
									ignoreCase: false,
									want:       "\"Tribe\"",
								},
								&litMatcher{
									pos:        position{line: 41, col: 26, offset: 707},
									val:        "Courier",
									ignoreCase: false,
									want:       "\"Courier\"",
								},
								&litMatcher{
									pos:        position{line: 41, col: 38, offset: 719},
									val:        "Element",
									ignoreCase: false,
									want:       "\"Element\"",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 41, col: 49, offset: 730},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 41, col: 51, offset: 732},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 41, col: 54, offset: 735},
								name: "UNITID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 42, col: 2, offset: 743},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 42, col: 4, offset: 745},
							label: "commonHeadingi",
							expr: &ruleRefExpr{
								pos:  position{line: 42, col: 19, offset: 760},
								name: "CommonHeading",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 43, col: 2, offset: 775},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 43, col: 4, offset: 777},
							expr: &ruleRefExpr{
								pos:  position{line: 43, col: 4, offset: 777},
								name: "ClanHeading",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 2, offset: 791},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 4, offset: 793},
							label: "goodsTribe",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 15, offset: 804},
								name: "GoodsTribe",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 45, col: 2, offset: 816},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 45, col: 4, offset: 818},
							expr: &ruleRefExpr{
								pos:  position{line: 45, col: 4, offset: 818},
								name: "DesiredCommodities",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 2, offset: 839},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 46, col: 4, offset: 841},
							label: "gmNotes",
							expr: &zeroOrOneExpr{
								pos: position{line: 46, col: 12, offset: 849},
								expr: &ruleRefExpr{
									pos:  position{line: 46, col: 12, offset: 849},
									name: "GMNotes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 47, col: 2, offset: 859},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 47, col: 4, offset: 861},
							label: "tact",
							expr: &ruleRefExpr{
								pos:  position{line: 47, col: 9, offset: 866},
								name: "TribeActivities",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 48, col: 2, offset: 883},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 48, col: 4, offset: 885},
							label: "fact",
							expr: &ruleRefExpr{
								pos:  position{line: 48, col: 9, offset: 890},
								name: "FinalActivities",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 49, col: 2, offset: 907},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 49, col: 4, offset: 909},
							label: "tmove",
							expr: &ruleRefExpr{
								pos:  position{line: 49, col: 10, offset: 915},
								name: "TribeMovement",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 50, col: 2, offset: 930},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 50, col: 4, offset: 932},
							label: "smove",
							expr: &zeroOrOneExpr{
								pos: position{line: 50, col: 10, offset: 938},
								expr: &ruleRefExpr{
									pos:  position{line: 50, col: 10, offset: 938},
									name: "ScoutMovement",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 51, col: 2, offset: 954},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 51, col: 4, offset: 956},
							label: "status",
							expr: &ruleRefExpr{
								pos:  position{line: 51, col: 11, offset: 963},
								name: "UnitStatus",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 52, col: 2, offset: 975},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 52, col: 4, offset: 977},
							label: "people",
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 11, offset: 984},
								name: "Humans",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 53, col: 2, offset: 992},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 53, col: 4, offset: 994},
							label: "possessions",
							expr: &zeroOrOneExpr{
								pos: position{line: 53, col: 16, offset: 1006},
								expr: &ruleRefExpr{
									pos:  position{line: 53, col: 16, offset: 1006},
									name: "Possessions",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 54, col: 2, offset: 1020},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 54, col: 4, offset: 1022},
							label: "skills",
							expr: &ruleRefExpr{
								pos:  position{line: 54, col: 11, offset: 1029},
								name: "Skills",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 55, col: 2, offset: 1037},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 55, col: 4, offset: 1039},
							label: "morale",
							expr: &ruleRefExpr{
								pos:  position{line: 55, col: 11, offset: 1046},
								name: "Morale",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 2, offset: 1054},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 4, offset: 1056},
							label: "weight",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 11, offset: 1063},
								name: "Weight",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 57, col: 2, offset: 1071},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 57, col: 4, offset: 1073},
							label: "truces",
							expr: &zeroOrOneExpr{
								pos: position{line: 57, col: 11, offset: 1080},
								expr: &ruleRefExpr{
									pos:  position{line: 57, col: 11, offset: 1080},
									name: "Truces",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 2, offset: 1089},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 4, offset: 1091},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 6, offset: 1093},
								name: "BLEET",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 12, offset: 1099},
							name: "FF",
						},
					},
				},
			},
		},
		{
			name: "CommonHeading",
			pos:  position{line: 95, col: 1, offset: 2047},
			expr: &actionExpr{
				pos: position{line: 96, col: 2, offset: 2065},
				run: (*parser).callonCommonHeading1,
				expr: &seqExpr{
					pos: position{line: 96, col: 2, offset: 2065},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 96, col: 2, offset: 2065},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 4, offset: 2067},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 8, offset: 2071},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 10, offset: 2073},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 14, offset: 2077},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 16, offset: 2079},
							val:        "Current Hex",
							ignoreCase: false,
							want:       "\"Current Hex\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 30, offset: 2093},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 32, offset: 2095},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 36, offset: 2099},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 38, offset: 2101},
							label: "currentHex",
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 49, offset: 2112},
								name: "HEXID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 55, offset: 2118},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 57, offset: 2120},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 61, offset: 2124},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 63, offset: 2126},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 67, offset: 2130},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 69, offset: 2132},
							val:        "Previous Hex",
							ignoreCase: false,
							want:       "\"Previous Hex\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 84, offset: 2147},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 86, offset: 2149},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 90, offset: 2153},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 92, offset: 2155},
							label: "startingHex",
							expr: &ruleRefExpr{
								pos:  position{line: 96, col: 104, offset: 2167},
								name: "HEXID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 110, offset: 2173},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 96, col: 112, offset: 2175},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 2, offset: 2180},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 97, col: 4, offset: 2182},
							val:        "Current Turn",
							ignoreCase: false,
							want:       "\"Current Turn\"",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 19, offset: 2197},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 97, col: 21, offset: 2199},
							label: "turn",
							expr: &ruleRefExpr{
								pos:  position{line: 97, col: 26, offset: 2204},
								name: "TURNID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 33, offset: 2211},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 97, col: 35, offset: 2213},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 39, offset: 2217},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 41, offset: 2219},
							name: "MONTHID",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 49, offset: 2227},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 97, col: 51, offset: 2229},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 55, offset: 2233},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 97, col: 57, offset: 2235},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 61, offset: 2239},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 63, offset: 2241},
							name: "SEASON",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 70, offset: 2248},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 97, col: 72, offset: 2250},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 76, offset: 2254},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 97, col: 78, offset: 2256},
							name: "WEATHER",
						},
					},
				},
			},
		},
		{
			name: "ClanHeading",
			pos:  position{line: 106, col: 1, offset: 2419},
			expr: &actionExpr{
				pos: position{line: 107, col: 5, offset: 2438},
				run: (*parser).callonClanHeading1,
				expr: &seqExpr{
					pos: position{line: 107, col: 5, offset: 2438},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 107, col: 5, offset: 2438},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 107, col: 7, offset: 2440},
							val:        "Next Turn",
							ignoreCase: false,
							want:       "\"Next Turn\"",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 19, offset: 2452},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 21, offset: 2454},
							name: "TURNID",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 28, offset: 2461},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 107, col: 30, offset: 2463},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 34, offset: 2467},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 36, offset: 2469},
							name: "MONTHID",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 44, offset: 2477},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 107, col: 46, offset: 2479},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 50, offset: 2483},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 107, col: 52, offset: 2485},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 56, offset: 2489},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 58, offset: 2491},
							name: "DDMMYYYY",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 5, offset: 2504},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 108, col: 7, offset: 2506},
							val:        "Received:",
							ignoreCase: false,
							want:       "\"Received:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 19, offset: 2518},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 108, col: 21, offset: 2520},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 25, offset: 2524},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 27, offset: 2526},
							name: "NUMBER",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 34, offset: 2533},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 108, col: 36, offset: 2535},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 40, offset: 2539},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 108, col: 42, offset: 2541},
							val:        "Cost:",
							ignoreCase: false,
							want:       "\"Cost:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 50, offset: 2549},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 108, col: 52, offset: 2551},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 56, offset: 2555},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 58, offset: 2557},
							name: "NUMBER",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 65, offset: 2564},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 108, col: 67, offset: 2566},
							val:        "Credit:",
							ignoreCase: false,
							want:       "\"Credit:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 77, offset: 2576},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 108, col: 79, offset: 2578},
							val:        "$",
							ignoreCase: false,
							want:       "\"$\"",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 83, offset: 2582},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 108, col: 85, offset: 2584},
							name: "NUMBER",
						},
					},
				},
			},
		},
		{
			name: "GoodsTribe",
			pos:  position{line: 113, col: 1, offset: 2627},
			expr: &actionExpr{
				pos: position{line: 113, col: 15, offset: 2641},
				run: (*parser).callonGoodsTribe1,
				expr: &seqExpr{
					pos: position{line: 113, col: 15, offset: 2641},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 113, col: 15, offset: 2641},
							val:        "Goods Tribe:",
							ignoreCase: false,
							want:       "\"Goods Tribe:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 30, offset: 2656},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 113, col: 32, offset: 2658},
							label: "id",
							expr: &choiceExpr{
								pos: position{line: 113, col: 36, offset: 2662},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 113, col: 36, offset: 2662},
										val:        "No GT",
										ignoreCase: false,
										want:       "\"No GT\"",
									},
									&ruleRefExpr{
										pos:  position{line: 113, col: 46, offset: 2672},
										name: "TRIBEID",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "DesiredCommodities",
			pos:  position{line: 130, col: 1, offset: 3017},
			expr: &actionExpr{
				pos: position{line: 130, col: 23, offset: 3039},
				run: (*parser).callonDesiredCommodities1,
				expr: &seqExpr{
					pos: position{line: 130, col: 23, offset: 3039},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 130, col: 23, offset: 3039},
							val:        "Desired Commodities:",
							ignoreCase: false,
							want:       "\"Desired Commodities:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 46, offset: 3062},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 130, col: 48, offset: 3064},
							val:        "(1)",
							ignoreCase: false,
							want:       "\"(1)\"",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 54, offset: 3070},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 56, offset: 3072},
							label: "c1",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 59, offset: 3075},
								name: "COMMODITY",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 69, offset: 3085},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 130, col: 71, offset: 3087},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 75, offset: 3091},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 130, col: 77, offset: 3093},
							val:        "(2)",
							ignoreCase: false,
							want:       "\"(2)\"",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 83, offset: 3099},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 85, offset: 3101},
							label: "c2",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 88, offset: 3104},
								name: "COMMODITY",
							},
						},
					},
				},
			},
		},
		{
			name: "GMNotes",
			pos:  position{line: 136, col: 1, offset: 3196},
			expr: &actionExpr{
				pos: position{line: 136, col: 12, offset: 3207},
				run: (*parser).callonGMNotes1,
				expr: &seqExpr{
					pos: position{line: 136, col: 12, offset: 3207},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 136, col: 12, offset: 3207},
							expr: &seqExpr{
								pos: position{line: 136, col: 13, offset: 3208},
								exprs: []any{
									&notExpr{
										pos: position{line: 136, col: 13, offset: 3208},
										expr: &litMatcher{
											pos:        position{line: 136, col: 14, offset: 3209},
											val:        "Tribe Activities:",
											ignoreCase: false,
											want:       "\"Tribe Activities:\"",
										},
									},
									&anyMatcher{
										line: 136, col: 34, offset: 3229,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 136, col: 38, offset: 3233},
							expr: &litMatcher{
								pos:        position{line: 136, col: 39, offset: 3234},
								val:        "Tribe Activities:",
								ignoreCase: false,
								want:       "\"Tribe Activities:\"",
							},
						},
					},
				},
			},
		},
		{
			name: "TribeActivities",
			pos:  position{line: 140, col: 1, offset: 3309},
			expr: &actionExpr{
				pos: position{line: 140, col: 20, offset: 3328},
				run: (*parser).callonTribeActivities1,
				expr: &seqExpr{
					pos: position{line: 140, col: 20, offset: 3328},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 140, col: 20, offset: 3328},
							val:        "Tribe Activities:",
							ignoreCase: false,
							want:       "\"Tribe Activities:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 140, col: 40, offset: 3348},
							expr: &seqExpr{
								pos: position{line: 140, col: 41, offset: 3349},
								exprs: []any{
									&notExpr{
										pos: position{line: 140, col: 41, offset: 3349},
										expr: &litMatcher{
											pos:        position{line: 140, col: 42, offset: 3350},
											val:        "Final Activities:",
											ignoreCase: false,
											want:       "\"Final Activities:\"",
										},
									},
									&anyMatcher{
										line: 140, col: 62, offset: 3370,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FinalActivities",
			pos:  position{line: 146, col: 1, offset: 3453},
			expr: &actionExpr{
				pos: position{line: 146, col: 20, offset: 3472},
				run: (*parser).callonFinalActivities1,
				expr: &seqExpr{
					pos: position{line: 146, col: 20, offset: 3472},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 146, col: 20, offset: 3472},
							val:        "Final Activities:",
							ignoreCase: false,
							want:       "\"Final Activities:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 146, col: 40, offset: 3492},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 146, col: 42, offset: 3494},
							label: "bleet",
							expr: &ruleRefExpr{
								pos:  position{line: 146, col: 48, offset: 3500},
								name: "untilTribeMovement",
							},
						},
					},
				},
			},
		},
		{
			name: "untilTribeMovement",
			pos:  position{line: 156, col: 1, offset: 3699},
			expr: &actionExpr{
				pos: position{line: 156, col: 23, offset: 3721},
				run: (*parser).callonuntilTribeMovement1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 156, col: 23, offset: 3721},
					expr: &seqExpr{
						pos: position{line: 156, col: 24, offset: 3722},
						exprs: []any{
							&notExpr{
								pos: position{line: 156, col: 24, offset: 3722},
								expr: &choiceExpr{
									pos: position{line: 156, col: 26, offset: 3724},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 156, col: 26, offset: 3724},
											val:        "Tribe Follows",
											ignoreCase: false,
											want:       "\"Tribe Follows\"",
										},
										&litMatcher{
											pos:        position{line: 156, col: 44, offset: 3742},
											val:        "Tribe Movement:",
											ignoreCase: false,
											want:       "\"Tribe Movement:\"",
										},
									},
								},
							},
							&anyMatcher{
								line: 156, col: 63, offset: 3761,
							},
						},
					},
				},
			},
		},
		{
			name: "TribeMovement",
			pos:  position{line: 160, col: 1, offset: 3801},
			expr: &choiceExpr{
				pos: position{line: 160, col: 18, offset: 3818},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 160, col: 18, offset: 3818},
						run: (*parser).callonTribeMovement2,
						expr: &seqExpr{
							pos: position{line: 160, col: 18, offset: 3818},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 160, col: 18, offset: 3818},
									val:        "Tribe Movement:",
									ignoreCase: false,
									want:       "\"Tribe Movement:\"",
								},
								&ruleRefExpr{
									pos:  position{line: 160, col: 36, offset: 3836},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 160, col: 38, offset: 3838},
									val:        "Move",
									ignoreCase: false,
									want:       "\"Move\"",
								},
								&ruleRefExpr{
									pos:  position{line: 160, col: 45, offset: 3845},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 160, col: 47, offset: 3847},
									label: "movesi",
									expr: &ruleRefExpr{
										pos:  position{line: 160, col: 54, offset: 3854},
										name: "Moves",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 160, col: 60, offset: 3860},
									name: "NL",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 171, col: 5, offset: 4123},
						run: (*parser).callonTribeMovement11,
						expr: &seqExpr{
							pos: position{line: 171, col: 5, offset: 4123},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 171, col: 5, offset: 4123},
									val:        "Tribe Follows",
									ignoreCase: false,
									want:       "\"Tribe Follows\"",
								},
								&ruleRefExpr{
									pos:  position{line: 171, col: 21, offset: 4139},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 171, col: 23, offset: 4141},
									label: "id",
									expr: &ruleRefExpr{
										pos:  position{line: 171, col: 26, offset: 4144},
										name: "UNITID",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 171, col: 33, offset: 4151},
									name: "NL",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Moves",
			pos:  position{line: 175, col: 1, offset: 4212},
			expr: &actionExpr{
				pos: position{line: 175, col: 10, offset: 4221},
				run: (*parser).callonMoves1,
				expr: &seqExpr{
					pos: position{line: 175, col: 10, offset: 4221},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 175, col: 10, offset: 4221},
							label: "movesi",
							expr: &oneOrMoreExpr{
								pos: position{line: 175, col: 17, offset: 4228},
								expr: &ruleRefExpr{
									pos:  position{line: 175, col: 17, offset: 4228},
									name: "validMove",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 28, offset: 4239},
							name: "NL",
						},
					},
				},
			},
		},
		{
			name: "validMove",
			pos:  position{line: 186, col: 1, offset: 4439},
			expr: &choiceExpr{
				pos: position{line: 186, col: 14, offset: 4452},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 186, col: 14, offset: 4452},
						run: (*parser).callonvalidMove2,
						expr: &labeledExpr{
							pos:   position{line: 186, col: 14, offset: 4452},
							label: "move",
							expr: &ruleRefExpr{
								pos:  position{line: 186, col: 19, offset: 4457},
								name: "successfulMove",
							},
						},
					},
					&actionExpr{
						pos: position{line: 188, col: 5, offset: 4499},
						run: (*parser).callonvalidMove5,
						expr: &labeledExpr{
							pos:   position{line: 188, col: 5, offset: 4499},
							label: "move",
							expr: &ruleRefExpr{
								pos:  position{line: 188, col: 10, offset: 4504},
								name: "failedMove",
							},
						},
					},
					&actionExpr{
						pos: position{line: 190, col: 5, offset: 4542},
						run: (*parser).callonvalidMove8,
						expr: &labeledExpr{
							pos:   position{line: 190, col: 5, offset: 4542},
							label: "move",
							expr: &ruleRefExpr{
								pos:  position{line: 190, col: 10, offset: 4547},
								name: "stillMove",
							},
						},
					},
				},
			},
		},
		{
			name: "failedMove",
			pos:  position{line: 194, col: 1, offset: 4583},
			expr: &actionExpr{
				pos: position{line: 194, col: 15, offset: 4597},
				run: (*parser).callonfailedMove1,
				expr: &seqExpr{
					pos: position{line: 194, col: 15, offset: 4597},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 194, col: 15, offset: 4597},
							val:        "Can't Move",
							ignoreCase: false,
							want:       "\"Can't Move\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 194, col: 28, offset: 4610},
							expr: &seqExpr{
								pos: position{line: 194, col: 29, offset: 4611},
								exprs: []any{
									&notExpr{
										pos: position{line: 194, col: 29, offset: 4611},
										expr: &ruleRefExpr{
											pos:  position{line: 194, col: 30, offset: 4612},
											name: "NL",
										},
									},
									&anyMatcher{
										line: 194, col: 33, offset: 4615,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "successfulMove",
			pos:  position{line: 198, col: 1, offset: 4705},
			expr: &actionExpr{
				pos: position{line: 198, col: 19, offset: 4723},
				run: (*parser).callonsuccessfulMove1,
				expr: &seqExpr{
					pos: position{line: 198, col: 19, offset: 4723},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 198, col: 19, offset: 4723},
							label: "direction",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 29, offset: 4733},
								name: "DIRECTION",
							},
						},
						&litMatcher{
							pos:        position{line: 198, col: 39, offset: 4743},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&labeledExpr{
							pos:   position{line: 198, col: 43, offset: 4747},
							label: "terrain",
							expr: &ruleRefExpr{
								pos:  position{line: 198, col: 51, offset: 4755},
								name: "TERRAIN",
							},
						},
						&labeledExpr{
							pos:   position{line: 198, col: 59, offset: 4763},
							label: "mi",
							expr: &zeroOrOneExpr{
								pos: position{line: 198, col: 62, offset: 4766},
								expr: &ruleRefExpr{
									pos:  position{line: 198, col: 62, offset: 4766},
									name: "optMoveInfo",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 198, col: 75, offset: 4779},
							name: "BACKSLASH",
						},
					},
				},
			},
		},
		{
			name: "stillMove",
			pos:  position{line: 209, col: 1, offset: 5002},
			expr: &actionExpr{
				pos: position{line: 209, col: 14, offset: 5015},
				run: (*parser).callonstillMove1,
				expr: &ruleRefExpr{
					pos:  position{line: 209, col: 14, offset: 5015},
					name: "BACKSLASH",
				},
			},
		},
		{
			name: "optMoveInfo",
			pos:  position{line: 214, col: 1, offset: 5106},
			expr: &actionExpr{
				pos: position{line: 214, col: 16, offset: 5121},
				run: (*parser).callonoptMoveInfo1,
				expr: &labeledExpr{
					pos:   position{line: 214, col: 16, offset: 5121},
					label: "moveInfo",
					expr: &ruleRefExpr{
						pos:  position{line: 214, col: 25, offset: 5130},
						name: "OPTMOVEINFO",
					},
				},
			},
		},
		{
			name: "untilStatusOrScout",
			pos:  position{line: 219, col: 1, offset: 5220},
			expr: &actionExpr{
				pos: position{line: 219, col: 23, offset: 5242},
				run: (*parser).callonuntilStatusOrScout1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 219, col: 23, offset: 5242},
					expr: &seqExpr{
						pos: position{line: 219, col: 24, offset: 5243},
						exprs: []any{
							&notExpr{
								pos: position{line: 219, col: 24, offset: 5243},
								expr: &choiceExpr{
									pos: position{line: 219, col: 26, offset: 5245},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 219, col: 27, offset: 5246},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 219, col: 27, offset: 5246},
													name: "UNITID",
												},
												&ruleRefExpr{
													pos:  position{line: 219, col: 34, offset: 5253},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 219, col: 36, offset: 5255},
													val:        "Status:",
													ignoreCase: false,
													want:       "\"Status:\"",
												},
											},
										},
										&litMatcher{
											pos:        position{line: 219, col: 49, offset: 5268},
											val:        "Scout 1:",
											ignoreCase: false,
											want:       "\"Scout 1:\"",
										},
									},
								},
							},
							&anyMatcher{
								line: 219, col: 61, offset: 5280,
							},
						},
					},
				},
			},
		},
		{
			name: "ScoutMovement",
			pos:  position{line: 223, col: 1, offset: 5320},
			expr: &actionExpr{
				pos: position{line: 223, col: 18, offset: 5337},
				run: (*parser).callonScoutMovement1,
				expr: &seqExpr{
					pos: position{line: 223, col: 18, offset: 5337},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 223, col: 18, offset: 5337},
							val:        "Scout 1:",
							ignoreCase: false,
							want:       "\"Scout 1:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 223, col: 29, offset: 5348},
							expr: &seqExpr{
								pos: position{line: 223, col: 30, offset: 5349},
								exprs: []any{
									&notExpr{
										pos: position{line: 223, col: 30, offset: 5349},
										expr: &seqExpr{
											pos: position{line: 223, col: 32, offset: 5351},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 223, col: 32, offset: 5351},
													name: "UNITID",
												},
												&ruleRefExpr{
													pos:  position{line: 223, col: 39, offset: 5358},
													name: "_",
												},
												&litMatcher{
													pos:        position{line: 223, col: 41, offset: 5360},
													val:        "Status:",
													ignoreCase: false,
													want:       "\"Status:\"",
												},
											},
										},
									},
									&anyMatcher{
										line: 223, col: 52, offset: 5371,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnitStatus",
			pos:  position{line: 229, col: 1, offset: 5452},
			expr: &actionExpr{
				pos: position{line: 229, col: 15, offset: 5466},
				run: (*parser).callonUnitStatus1,
				expr: &seqExpr{
					pos: position{line: 229, col: 15, offset: 5466},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 229, col: 15, offset: 5466},
							label: "id",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 18, offset: 5469},
								name: "UNITID",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 229, col: 25, offset: 5476},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 229, col: 27, offset: 5478},
							val:        "Status:",
							ignoreCase: false,
							want:       "\"Status:\"",
						},
						&ruleRefExpr{
							pos:  position{line: 229, col: 37, offset: 5488},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 39, offset: 5490},
							label: "terrain",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 47, offset: 5498},
								name: "TERRAIN",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 229, col: 55, offset: 5506},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 229, col: 57, offset: 5508},
							label: "bleet",
							expr: &ruleRefExpr{
								pos:  position{line: 229, col: 63, offset: 5514},
								name: "untilHumans",
							},
						},
					},
				},
			},
		},
		{
			name: "untilHumans",
			pos:  position{line: 237, col: 1, offset: 5656},
			expr: &actionExpr{
				pos: position{line: 237, col: 16, offset: 5671},
				run: (*parser).callonuntilHumans1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 237, col: 16, offset: 5671},
					expr: &seqExpr{
						pos: position{line: 237, col: 17, offset: 5672},
						exprs: []any{
							&notExpr{
								pos: position{line: 237, col: 17, offset: 5672},
								expr: &litMatcher{
									pos:        position{line: 237, col: 18, offset: 5673},
									val:        "Humans",
									ignoreCase: false,
									want:       "\"Humans\"",
								},
							},
							&anyMatcher{
								line: 237, col: 27, offset: 5682,
							},
						},
					},
				},
			},
		},
		{
			name: "Humans",
			pos:  position{line: 241, col: 1, offset: 5722},
			expr: &actionExpr{
				pos: position{line: 241, col: 11, offset: 5732},
				run: (*parser).callonHumans1,
				expr: &seqExpr{
					pos: position{line: 241, col: 11, offset: 5732},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 241, col: 11, offset: 5732},
							val:        "Humans",
							ignoreCase: false,
							want:       "\"Humans\"",
						},
						&ruleRefExpr{
							pos:  position{line: 241, col: 20, offset: 5741},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 242, col: 3, offset: 5745},
							val:        "People",
							ignoreCase: false,
							want:       "\"People\"",
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 12, offset: 5754},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 242, col: 14, offset: 5756},
							label: "totalPeople",
							expr: &ruleRefExpr{
								pos:  position{line: 242, col: 26, offset: 5768},
								name: "NUMBER",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 242, col: 33, offset: 5775},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 243, col: 3, offset: 5779},
							val:        "Warriors",
							ignoreCase: false,
							want:       "\"Warriors\"",
						},
						&ruleRefExpr{
							pos:  position{line: 243, col: 14, offset: 5790},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 243, col: 16, offset: 5792},
							label: "warriors",
							expr: &ruleRefExpr{
								pos:  position{line: 243, col: 25, offset: 5801},
								name: "NUMBER",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 243, col: 32, offset: 5808},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 244, col: 3, offset: 5812},
							val:        "Actives",
							ignoreCase: false,
							want:       "\"Actives\"",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 13, offset: 5822},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 15, offset: 5824},
							label: "active",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 22, offset: 5831},
								name: "NUMBER",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 29, offset: 5838},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 245, col: 3, offset: 5842},
							val:        "Inactives",
							ignoreCase: false,
							want:       "\"Inactives\"",
						},
						&ruleRefExpr{
							pos:  position{line: 245, col: 15, offset: 5854},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 245, col: 17, offset: 5856},
							label: "inactive",
							expr: &ruleRefExpr{
								pos:  position{line: 245, col: 26, offset: 5865},
								name: "NUMBER",
							},
						},
						&zeroOrMoreExpr{
							pos: position{line: 246, col: 3, offset: 5874},
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 3, offset: 5874},
								name: "SPACE",
							},
						},
						&litMatcher{
							pos:        position{line: 246, col: 10, offset: 5881},
							val:        "\n\n",
							ignoreCase: false,
							want:       "\"\\n\\n\"",
						},
					},
				},
			},
		},
		{
			name: "Possessions",
			pos:  position{line: 265, col: 1, offset: 6360},
			expr: &actionExpr{
				pos: position{line: 265, col: 16, offset: 6375},
				run: (*parser).callonPossessions1,
				expr: &seqExpr{
					pos: position{line: 265, col: 16, offset: 6375},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 265, col: 16, offset: 6375},
							label: "animals",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 24, offset: 6383},
								name: "Animals",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 32, offset: 6391},
							label: "minerals",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 41, offset: 6400},
								name: "Minerals",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 50, offset: 6409},
							label: "warEquipment",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 63, offset: 6422},
								name: "WarEquipment",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 76, offset: 6435},
							label: "finishedGoods",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 90, offset: 6449},
								name: "FinishedGoods",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 104, offset: 6463},
							label: "rawMaterials",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 117, offset: 6476},
								name: "RawMaterials",
							},
						},
						&labeledExpr{
							pos:   position{line: 265, col: 130, offset: 6489},
							label: "ships",
							expr: &ruleRefExpr{
								pos:  position{line: 265, col: 136, offset: 6495},
								name: "Ships",
							},
						},
					},
				},
			},
		},
		{
			name: "Animals",
			pos:  position{line: 276, col: 1, offset: 6802},
			expr: &actionExpr{
				pos: position{line: 276, col: 12, offset: 6813},
				run: (*parser).callonAnimals1,
				expr: &seqExpr{
					pos: position{line: 276, col: 12, offset: 6813},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 276, col: 12, offset: 6813},
							val:        "Animals",
							ignoreCase: false,
							want:       "\"Animals\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 276, col: 22, offset: 6823},
							expr: &seqExpr{
								pos: position{line: 276, col: 23, offset: 6824},
								exprs: []any{
									&notExpr{
										pos: position{line: 276, col: 23, offset: 6824},
										expr: &litMatcher{
											pos:        position{line: 276, col: 24, offset: 6825},
											val:        "Minerals",
											ignoreCase: false,
											want:       "\"Minerals\"",
										},
									},
									&anyMatcher{
										line: 276, col: 35, offset: 6836,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Minerals",
			pos:  position{line: 282, col: 1, offset: 6911},
			expr: &actionExpr{
				pos: position{line: 282, col: 13, offset: 6923},
				run: (*parser).callonMinerals1,
				expr: &seqExpr{
					pos: position{line: 282, col: 13, offset: 6923},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 282, col: 13, offset: 6923},
							val:        "Minerals",
							ignoreCase: false,
							want:       "\"Minerals\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 282, col: 24, offset: 6934},
							expr: &seqExpr{
								pos: position{line: 282, col: 25, offset: 6935},
								exprs: []any{
									&notExpr{
										pos: position{line: 282, col: 25, offset: 6935},
										expr: &litMatcher{
											pos:        position{line: 282, col: 26, offset: 6936},
											val:        "War Equipment",
											ignoreCase: false,
											want:       "\"War Equipment\"",
										},
									},
									&anyMatcher{
										line: 282, col: 42, offset: 6952,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WarEquipment",
			pos:  position{line: 288, col: 1, offset: 7028},
			expr: &actionExpr{
				pos: position{line: 288, col: 17, offset: 7044},
				run: (*parser).callonWarEquipment1,
				expr: &seqExpr{
					pos: position{line: 288, col: 17, offset: 7044},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 288, col: 17, offset: 7044},
							val:        "War Equipment",
							ignoreCase: false,
							want:       "\"War Equipment\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 288, col: 33, offset: 7060},
							expr: &seqExpr{
								pos: position{line: 288, col: 34, offset: 7061},
								exprs: []any{
									&notExpr{
										pos: position{line: 288, col: 34, offset: 7061},
										expr: &litMatcher{
											pos:        position{line: 288, col: 35, offset: 7062},
											val:        "Finished Goods",
											ignoreCase: false,
											want:       "\"Finished Goods\"",
										},
									},
									&anyMatcher{
										line: 288, col: 52, offset: 7079,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "FinishedGoods",
			pos:  position{line: 294, col: 1, offset: 7159},
			expr: &actionExpr{
				pos: position{line: 294, col: 18, offset: 7176},
				run: (*parser).callonFinishedGoods1,
				expr: &seqExpr{
					pos: position{line: 294, col: 18, offset: 7176},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 294, col: 18, offset: 7176},
							val:        "Finished Goods",
							ignoreCase: false,
							want:       "\"Finished Goods\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 294, col: 35, offset: 7193},
							expr: &seqExpr{
								pos: position{line: 294, col: 36, offset: 7194},
								exprs: []any{
									&notExpr{
										pos: position{line: 294, col: 36, offset: 7194},
										expr: &litMatcher{
											pos:        position{line: 294, col: 37, offset: 7195},
											val:        "Raw Materials",
											ignoreCase: false,
											want:       "\"Raw Materials\"",
										},
									},
									&anyMatcher{
										line: 294, col: 53, offset: 7211,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "RawMaterials",
			pos:  position{line: 300, col: 1, offset: 7292},
			expr: &actionExpr{
				pos: position{line: 300, col: 17, offset: 7308},
				run: (*parser).callonRawMaterials1,
				expr: &seqExpr{
					pos: position{line: 300, col: 17, offset: 7308},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 300, col: 17, offset: 7308},
							val:        "Raw Materials",
							ignoreCase: false,
							want:       "\"Raw Materials\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 300, col: 33, offset: 7324},
							expr: &seqExpr{
								pos: position{line: 300, col: 34, offset: 7325},
								exprs: []any{
									&notExpr{
										pos: position{line: 300, col: 34, offset: 7325},
										expr: &litMatcher{
											pos:        position{line: 300, col: 35, offset: 7326},
											val:        "Ships",
											ignoreCase: false,
											want:       "\"Ships\"",
										},
									},
									&anyMatcher{
										line: 300, col: 43, offset: 7334,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Ships",
			pos:  position{line: 306, col: 1, offset: 7414},
			expr: &actionExpr{
				pos: position{line: 306, col: 10, offset: 7423},
				run: (*parser).callonShips1,
				expr: &seqExpr{
					pos: position{line: 306, col: 10, offset: 7423},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 306, col: 10, offset: 7423},
							val:        "Ships",
							ignoreCase: false,
							want:       "\"Ships\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 306, col: 18, offset: 7431},
							expr: &seqExpr{
								pos: position{line: 306, col: 19, offset: 7432},
								exprs: []any{
									&notExpr{
										pos: position{line: 306, col: 19, offset: 7432},
										expr: &litMatcher{
											pos:        position{line: 306, col: 20, offset: 7433},
											val:        "Skills:",
											ignoreCase: false,
											want:       "\"Skills:\"",
										},
									},
									&anyMatcher{
										line: 306, col: 30, offset: 7443,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Skills",
			pos:  position{line: 312, col: 1, offset: 7516},
			expr: &actionExpr{
				pos: position{line: 312, col: 11, offset: 7526},
				run: (*parser).callonSkills1,
				expr: &seqExpr{
					pos: position{line: 312, col: 11, offset: 7526},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 312, col: 11, offset: 7526},
							val:        "Skills:",
							ignoreCase: false,
							want:       "\"Skills:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 312, col: 21, offset: 7536},
							expr: &seqExpr{
								pos: position{line: 312, col: 22, offset: 7537},
								exprs: []any{
									&notExpr{
										pos: position{line: 312, col: 22, offset: 7537},
										expr: &litMatcher{
											pos:        position{line: 312, col: 23, offset: 7538},
											val:        "Morale :",
											ignoreCase: false,
											want:       "\"Morale :\"",
										},
									},
									&anyMatcher{
										line: 312, col: 34, offset: 7549,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Morale",
			pos:  position{line: 318, col: 1, offset: 7623},
			expr: &actionExpr{
				pos: position{line: 318, col: 11, offset: 7633},
				run: (*parser).callonMorale1,
				expr: &seqExpr{
					pos: position{line: 318, col: 11, offset: 7633},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 318, col: 11, offset: 7633},
							val:        "Morale :",
							ignoreCase: false,
							want:       "\"Morale :\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 318, col: 22, offset: 7644},
							expr: &seqExpr{
								pos: position{line: 318, col: 23, offset: 7645},
								exprs: []any{
									&notExpr{
										pos: position{line: 318, col: 23, offset: 7645},
										expr: &litMatcher{
											pos:        position{line: 318, col: 24, offset: 7646},
											val:        "Weight:",
											ignoreCase: false,
											want:       "\"Weight:\"",
										},
									},
									&anyMatcher{
										line: 318, col: 34, offset: 7656,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Weight",
			pos:  position{line: 324, col: 1, offset: 7730},
			expr: &actionExpr{
				pos: position{line: 324, col: 11, offset: 7740},
				run: (*parser).callonWeight1,
				expr: &seqExpr{
					pos: position{line: 324, col: 11, offset: 7740},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 324, col: 11, offset: 7740},
							val:        "Weight:",
							ignoreCase: false,
							want:       "\"Weight:\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 324, col: 21, offset: 7750},
							expr: &seqExpr{
								pos: position{line: 324, col: 22, offset: 7751},
								exprs: []any{
									&notExpr{
										pos: position{line: 324, col: 22, offset: 7751},
										expr: &choiceExpr{
											pos: position{line: 324, col: 24, offset: 7753},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 324, col: 24, offset: 7753},
													name: "FF",
												},
												&litMatcher{
													pos:        position{line: 324, col: 29, offset: 7758},
													val:        "Truces :",
													ignoreCase: false,
													want:       "\"Truces :\"",
												},
											},
										},
									},
									&anyMatcher{
										line: 324, col: 41, offset: 7770,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Truces",
			pos:  position{line: 330, col: 1, offset: 7844},
			expr: &actionExpr{
				pos: position{line: 330, col: 11, offset: 7854},
				run: (*parser).callonTruces1,
				expr: &seqExpr{
					pos: position{line: 330, col: 11, offset: 7854},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 330, col: 11, offset: 7854},
							val:        "Truces :",
							ignoreCase: false,
							want:       "\"Truces :\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 330, col: 22, offset: 7865},
							expr: &seqExpr{
								pos: position{line: 330, col: 23, offset: 7866},
								exprs: []any{
									&notExpr{
										pos: position{line: 330, col: 23, offset: 7866},
										expr: &ruleRefExpr{
											pos:  position{line: 330, col: 24, offset: 7867},
											name: "FF",
										},
									},
									&anyMatcher{
										line: 330, col: 27, offset: 7870,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Transfers",
			pos:  position{line: 336, col: 1, offset: 7944},
			expr: &actionExpr{
				pos: position{line: 336, col: 14, offset: 7957},
				run: (*parser).callonTransfers1,
				expr: &seqExpr{
					pos: position{line: 336, col: 14, offset: 7957},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 336, col: 14, offset: 7957},
							val:        "Transfers",
							ignoreCase: false,
							want:       "\"Transfers\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 336, col: 26, offset: 7969},
							expr: &seqExpr{
								pos: position{line: 336, col: 27, offset: 7970},
								exprs: []any{
									&notExpr{
										pos: position{line: 336, col: 27, offset: 7970},
										expr: &ruleRefExpr{
											pos:  position{line: 336, col: 28, offset: 7971},
											name: "FF",
										},
									},
									&anyMatcher{
										line: 336, col: 31, offset: 7974,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Settlements",
			pos:  position{line: 342, col: 1, offset: 8051},
			expr: &actionExpr{
				pos: position{line: 342, col: 16, offset: 8066},
				run: (*parser).callonSettlements1,
				expr: &seqExpr{
					pos: position{line: 342, col: 16, offset: 8066},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 342, col: 16, offset: 8066},
							val:        "Settlements",
							ignoreCase: false,
							want:       "\"Settlements\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 342, col: 30, offset: 8080},
							expr: &seqExpr{
								pos: position{line: 342, col: 31, offset: 8081},
								exprs: []any{
									&notExpr{
										pos: position{line: 342, col: 31, offset: 8081},
										expr: &ruleRefExpr{
											pos:  position{line: 342, col: 32, offset: 8082},
											name: "FF",
										},
									},
									&anyMatcher{
										line: 342, col: 35, offset: 8085,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "BACKSLASH",
			pos:  position{line: 350, col: 1, offset: 8178},
			expr: &litMatcher{
				pos:        position{line: 350, col: 13, offset: 8190},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
		},
		{
			name: "DIGIT",
			pos:  position{line: 351, col: 1, offset: 8195},
			expr: &charClassMatcher{
				pos:        position{line: 351, col: 9, offset: 8203},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "EOF",
			pos:  position{line: 352, col: 1, offset: 8209},
			expr: &notExpr{
				pos: position{line: 352, col: 7, offset: 8215},
				expr: &anyMatcher{
					line: 352, col: 8, offset: 8216,
				},
			},
		},
		{
			name: "FF",
			pos:  position{line: 353, col: 1, offset: 8218},
			expr: &litMatcher{
				pos:        position{line: 353, col: 6, offset: 8223},
				val:        "\f",
				ignoreCase: false,
				want:       "\"\\f\"",
			},
		},
		{
			name: "NL",
			pos:  position{line: 354, col: 1, offset: 8228},
			expr: &litMatcher{
				pos:        position{line: 354, col: 6, offset: 8233},
				val:        "\n",
				ignoreCase: false,
				want:       "\"\\n\"",
			},
		},
		{
			name: "SPACE",
			pos:  position{line: 355, col: 1, offset: 8238},
			expr: &charClassMatcher{
				pos:        position{line: 355, col: 9, offset: 8246},
				val:        "[ \\t]",
				chars:      []rune{' ', '\t'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "STARTACTIVITIES",
			pos:  position{line: 356, col: 1, offset: 8252},
			expr: &choiceExpr{
				pos: position{line: 356, col: 19, offset: 8270},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 356, col: 19, offset: 8270},
						val:        "Tribe Activities:",
						ignoreCase: false,
						want:       "\"Tribe Activities:\"",
					},
					&litMatcher{
						pos:        position{line: 356, col: 41, offset: 8292},
						val:        "Final Activities",
						ignoreCase: false,
						want:       "\"Final Activities\"",
					},
				},
			},
		},
		{
			name: "UPPER",
			pos:  position{line: 357, col: 1, offset: 8311},
			expr: &charClassMatcher{
				pos:        position{line: 357, col: 9, offset: 8319},
				val:        "[A-Z]",
				ranges:     []rune{'A', 'Z'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "BLEET",
			pos:  position{line: 359, col: 1, offset: 8326},
			expr: &actionExpr{
				pos: position{line: 359, col: 10, offset: 8335},
				run: (*parser).callonBLEET1,
				expr: &seqExpr{
					pos: position{line: 359, col: 10, offset: 8335},
					exprs: []any{
						&zeroOrMoreExpr{
							pos: position{line: 359, col: 10, offset: 8335},
							expr: &seqExpr{
								pos: position{line: 359, col: 11, offset: 8336},
								exprs: []any{
									&notExpr{
										pos: position{line: 359, col: 11, offset: 8336},
										expr: &ruleRefExpr{
											pos:  position{line: 359, col: 12, offset: 8337},
											name: "FF",
										},
									},
									&anyMatcher{
										line: 359, col: 15, offset: 8340,
									},
								},
							},
						},
						&andExpr{
							pos: position{line: 359, col: 19, offset: 8344},
							expr: &ruleRefExpr{
								pos:  position{line: 359, col: 20, offset: 8345},
								name: "FF",
							},
						},
					},
				},
			},
		},
		{
			name: "COMMODITY",
			pos:  position{line: 364, col: 1, offset: 8403},
			expr: &choiceExpr{
				pos: position{line: 364, col: 14, offset: 8416},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 364, col: 14, offset: 8416},
						run: (*parser).callonCOMMODITY2,
						expr: &litMatcher{
							pos:        position{line: 364, col: 14, offset: 8416},
							val:        "coffee",
							ignoreCase: true,
							want:       "\"coffee\"i",
						},
					},
					&actionExpr{
						pos: position{line: 366, col: 5, offset: 8463},
						run: (*parser).callonCOMMODITY4,
						expr: &litMatcher{
							pos:        position{line: 366, col: 5, offset: 8463},
							val:        "frankincense",
							ignoreCase: true,
							want:       "\"frankincense\"i",
						},
					},
				},
			},
		},
		{
			name: "COURIERID",
			pos:  position{line: 370, col: 1, offset: 8515},
			expr: &actionExpr{
				pos: position{line: 370, col: 14, offset: 8528},
				run: (*parser).callonCOURIERID1,
				expr: &seqExpr{
					pos: position{line: 370, col: 14, offset: 8528},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 370, col: 14, offset: 8528},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 20, offset: 8534},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 26, offset: 8540},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 32, offset: 8546},
							name: "DIGIT",
						},
						&litMatcher{
							pos:        position{line: 370, col: 38, offset: 8552},
							val:        "c",
							ignoreCase: false,
							want:       "\"c\"",
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 42, offset: 8556},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "DDMMYYYY",
			pos:  position{line: 374, col: 1, offset: 8598},
			expr: &actionExpr{
				pos: position{line: 374, col: 13, offset: 8610},
				run: (*parser).callonDDMMYYYY1,
				expr: &seqExpr{
					pos: position{line: 374, col: 13, offset: 8610},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 374, col: 13, offset: 8610},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 374, col: 19, offset: 8616},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 19, offset: 8616},
								name: "DIGIT",
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 26, offset: 8623},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 30, offset: 8627},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 374, col: 36, offset: 8633},
							expr: &ruleRefExpr{
								pos:  position{line: 374, col: 36, offset: 8633},
								name: "DIGIT",
							},
						},
						&litMatcher{
							pos:        position{line: 374, col: 43, offset: 8640},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 47, offset: 8644},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 53, offset: 8650},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 59, offset: 8656},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 374, col: 65, offset: 8662},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "DIRECTION",
			pos:  position{line: 378, col: 1, offset: 8704},
			expr: &actionExpr{
				pos: position{line: 378, col: 14, offset: 8717},
				run: (*parser).callonDIRECTION1,
				expr: &choiceExpr{
					pos: position{line: 378, col: 15, offset: 8718},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 378, col: 15, offset: 8718},
							val:        "NE",
							ignoreCase: false,
							want:       "\"NE\"",
						},
						&litMatcher{
							pos:        position{line: 378, col: 22, offset: 8725},
							val:        "NW",
							ignoreCase: false,
							want:       "\"NW\"",
						},
						&litMatcher{
							pos:        position{line: 378, col: 29, offset: 8732},
							val:        "N",
							ignoreCase: false,
							want:       "\"N\"",
						},
						&litMatcher{
							pos:        position{line: 378, col: 35, offset: 8738},
							val:        "SE",
							ignoreCase: false,
							want:       "\"SE\"",
						},
						&litMatcher{
							pos:        position{line: 378, col: 42, offset: 8745},
							val:        "SW",
							ignoreCase: false,
							want:       "\"SW\"",
						},
						&litMatcher{
							pos:        position{line: 378, col: 49, offset: 8752},
							val:        "S",
							ignoreCase: false,
							want:       "\"S\"",
						},
					},
				},
			},
		},
		{
			name: "ELEMENTID",
			pos:  position{line: 382, col: 1, offset: 8793},
			expr: &actionExpr{
				pos: position{line: 382, col: 14, offset: 8806},
				run: (*parser).callonELEMENTID1,
				expr: &seqExpr{
					pos: position{line: 382, col: 14, offset: 8806},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 382, col: 14, offset: 8806},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 20, offset: 8812},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 26, offset: 8818},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 32, offset: 8824},
							name: "DIGIT",
						},
						&litMatcher{
							pos:        position{line: 382, col: 38, offset: 8830},
							val:        "e",
							ignoreCase: false,
							want:       "\"e\"",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 42, offset: 8834},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "HEXID",
			pos:  position{line: 386, col: 1, offset: 8876},
			expr: &actionExpr{
				pos: position{line: 386, col: 10, offset: 8885},
				run: (*parser).callonHEXID1,
				expr: &seqExpr{
					pos: position{line: 386, col: 10, offset: 8885},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 386, col: 10, offset: 8885},
							name: "UPPER",
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 16, offset: 8891},
							name: "UPPER",
						},
						&litMatcher{
							pos:        position{line: 386, col: 22, offset: 8897},
							val:        " ",
							ignoreCase: false,
							want:       "\" \"",
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 26, offset: 8901},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 32, offset: 8907},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 38, offset: 8913},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 386, col: 44, offset: 8919},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "MONTHID",
			pos:  position{line: 390, col: 1, offset: 8961},
			expr: &actionExpr{
				pos: position{line: 390, col: 12, offset: 8972},
				run: (*parser).callonMONTHID1,
				expr: &seqExpr{
					pos: position{line: 390, col: 12, offset: 8972},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 390, col: 12, offset: 8972},
							val:        "#",
							ignoreCase: false,
							want:       "\"#\"",
						},
						&ruleRefExpr{
							pos:  position{line: 390, col: 16, offset: 8976},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 390, col: 22, offset: 8982},
							expr: &ruleRefExpr{
								pos:  position{line: 390, col: 22, offset: 8982},
								name: "DIGIT",
							},
						},
					},
				},
			},
		},
		{
			name: "NUMBER",
			pos:  position{line: 394, col: 1, offset: 9029},
			expr: &actionExpr{
				pos: position{line: 394, col: 11, offset: 9039},
				run: (*parser).callonNUMBER1,
				expr: &seqExpr{
					pos: position{line: 394, col: 11, offset: 9039},
					exprs: []any{
						&oneOrMoreExpr{
							pos: position{line: 394, col: 11, offset: 9039},
							expr: &ruleRefExpr{
								pos:  position{line: 394, col: 11, offset: 9039},
								name: "DIGIT",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 394, col: 18, offset: 9046},
							expr: &seqExpr{
								pos: position{line: 394, col: 19, offset: 9047},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 394, col: 19, offset: 9047},
										val:        ".",
										ignoreCase: false,
										want:       "\".\"",
									},
									&oneOrMoreExpr{
										pos: position{line: 394, col: 23, offset: 9051},
										expr: &ruleRefExpr{
											pos:  position{line: 394, col: 23, offset: 9051},
											name: "DIGIT",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "OPTMOVEINFO",
			pos:  position{line: 398, col: 1, offset: 9096},
			expr: &actionExpr{
				pos: position{line: 398, col: 16, offset: 9111},
				run: (*parser).callonOPTMOVEINFO1,
				expr: &seqExpr{
					pos: position{line: 398, col: 16, offset: 9111},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 398, col: 16, offset: 9111},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 398, col: 20, offset: 9115},
							expr: &seqExpr{
								pos: position{line: 398, col: 21, offset: 9116},
								exprs: []any{
									&notExpr{
										pos: position{line: 398, col: 21, offset: 9116},
										expr: &choiceExpr{
											pos: position{line: 398, col: 23, offset: 9118},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 398, col: 23, offset: 9118},
													name: "BACKSLASH",
												},
												&ruleRefExpr{
													pos:  position{line: 398, col: 35, offset: 9130},
													name: "NL",
												},
											},
										},
									},
									&anyMatcher{
										line: 398, col: 39, offset: 9134,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "REST",
			pos:  position{line: 402, col: 1, offset: 9193},
			expr: &actionExpr{
				pos: position{line: 402, col: 9, offset: 9201},
				run: (*parser).callonREST1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 402, col: 9, offset: 9201},
					expr: &anyMatcher{
						line: 402, col: 9, offset: 9201,
					},
				},
			},
		},
		{
			name: "SEASON",
			pos:  position{line: 407, col: 1, offset: 9257},
			expr: &choiceExpr{
				pos: position{line: 407, col: 11, offset: 9267},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 407, col: 11, offset: 9267},
						val:        "Spring",
						ignoreCase: false,
						want:       "\"Spring\"",
					},
					&litMatcher{
						pos:        position{line: 407, col: 22, offset: 9278},
						val:        "Summer",
						ignoreCase: false,
						want:       "\"Summer\"",
					},
					&actionExpr{
						pos: position{line: 407, col: 33, offset: 9289},
						run: (*parser).callonSEASON4,
						expr: &litMatcher{
							pos:        position{line: 407, col: 33, offset: 9289},
							val:        "Winter",
							ignoreCase: false,
							want:       "\"Winter\"",
						},
					},
				},
			},
		},
		{
			name: "TERRAIN",
			pos:  position{line: 411, col: 1, offset: 9334},
			expr: &actionExpr{
				pos: position{line: 411, col: 15, offset: 9348},
				run: (*parser).callonTERRAIN1,
				expr: &choiceExpr{
					pos: position{line: 412, col: 5, offset: 9354},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 412, col: 5, offset: 9354},
							val:        "CONIFER HILLS",
							ignoreCase: false,
							want:       "\"CONIFER HILLS\"",
						},
						&litMatcher{
							pos:        position{line: 413, col: 5, offset: 9376},
							val:        "GRASSY HILLS",
							ignoreCase: false,
							want:       "\"GRASSY HILLS\"",
						},
						&litMatcher{
							pos:        position{line: 414, col: 5, offset: 9398},
							val:        "OCEAN",
							ignoreCase: false,
							want:       "\"OCEAN\"",
						},
						&litMatcher{
							pos:        position{line: 415, col: 5, offset: 9420},
							val:        "PRAIRIE",
							ignoreCase: false,
							want:       "\"PRAIRIE\"",
						},
						&litMatcher{
							pos:        position{line: 416, col: 5, offset: 9442},
							val:        "ROCKY HILLS",
							ignoreCase: false,
							want:       "\"ROCKY HILLS\"",
						},
						&litMatcher{
							pos:        position{line: 417, col: 5, offset: 9464},
							val:        "RIVER",
							ignoreCase: false,
							want:       "\"RIVER\"",
						},
						&litMatcher{
							pos:        position{line: 418, col: 5, offset: 9486},
							val:        "SWAMP",
							ignoreCase: false,
							want:       "\"SWAMP\"",
						},
						&litMatcher{
							pos:        position{line: 419, col: 5, offset: 9508},
							val:        "CH",
							ignoreCase: false,
							want:       "\"CH\"",
						},
						&litMatcher{
							pos:        position{line: 419, col: 12, offset: 9515},
							val:        "GH",
							ignoreCase: false,
							want:       "\"GH\"",
						},
						&litMatcher{
							pos:        position{line: 419, col: 19, offset: 9522},
							val:        "O",
							ignoreCase: false,
							want:       "\"O\"",
						},
						&litMatcher{
							pos:        position{line: 419, col: 25, offset: 9528},
							val:        "PR",
							ignoreCase: false,
							want:       "\"PR\"",
						},
						&litMatcher{
							pos:        position{line: 419, col: 32, offset: 9535},
							val:        "RH",
							ignoreCase: false,
							want:       "\"RH\"",
						},
						&litMatcher{
							pos:        position{line: 419, col: 39, offset: 9542},
							val:        "R",
							ignoreCase: false,
							want:       "\"R\"",
						},
						&litMatcher{
							pos:        position{line: 419, col: 45, offset: 9548},
							val:        "SW",
							ignoreCase: false,
							want:       "\"SW\"",
						},
					},
				},
			},
		},
		{
			name: "TRIBEID",
			pos:  position{line: 442, col: 1, offset: 10050},
			expr: &actionExpr{
				pos: position{line: 442, col: 12, offset: 10061},
				run: (*parser).callonTRIBEID1,
				expr: &seqExpr{
					pos: position{line: 442, col: 12, offset: 10061},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 442, col: 12, offset: 10061},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 442, col: 18, offset: 10067},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 442, col: 24, offset: 10073},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 442, col: 30, offset: 10079},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "TURNID",
			pos:  position{line: 446, col: 1, offset: 10121},
			expr: &actionExpr{
				pos: position{line: 446, col: 11, offset: 10131},
				run: (*parser).callonTURNID1,
				expr: &seqExpr{
					pos: position{line: 446, col: 11, offset: 10131},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 446, col: 11, offset: 10131},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 446, col: 17, offset: 10137},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 446, col: 23, offset: 10143},
							name: "DIGIT",
						},
						&litMatcher{
							pos:        position{line: 446, col: 29, offset: 10149},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
						&ruleRefExpr{
							pos:  position{line: 446, col: 33, offset: 10153},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 446, col: 39, offset: 10159},
							name: "DIGIT",
						},
					},
				},
			},
		},
		{
			name: "UNITID",
			pos:  position{line: 450, col: 1, offset: 10201},
			expr: &actionExpr{
				pos: position{line: 450, col: 11, offset: 10211},
				run: (*parser).callonUNITID1,
				expr: &seqExpr{
					pos: position{line: 450, col: 11, offset: 10211},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 450, col: 11, offset: 10211},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 450, col: 17, offset: 10217},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 450, col: 23, offset: 10223},
							name: "DIGIT",
						},
						&ruleRefExpr{
							pos:  position{line: 450, col: 29, offset: 10229},
							name: "DIGIT",
						},
						&zeroOrOneExpr{
							pos: position{line: 450, col: 35, offset: 10235},
							expr: &seqExpr{
								pos: position{line: 450, col: 36, offset: 10236},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 450, col: 36, offset: 10236},
										val:        "[ce]",
										chars:      []rune{'c', 'e'},
										ignoreCase: false,
										inverted:   false,
									},
									&ruleRefExpr{
										pos:  position{line: 450, col: 41, offset: 10241},
										name: "DIGIT",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "WEATHER",
			pos:  position{line: 454, col: 1, offset: 10285},
			expr: &actionExpr{
				pos: position{line: 454, col: 12, offset: 10296},
				run: (*parser).callonWEATHER1,
				expr: &litMatcher{
					pos:        position{line: 454, col: 12, offset: 10296},
					val:        "FINE",
					ignoreCase: false,
					want:       "\"FINE\"",
				},
			},
		},
		{
			name: "_",
			pos:  position{line: 458, col: 1, offset: 10339},
			expr: &zeroOrMoreExpr{
				pos: position{line: 458, col: 5, offset: 10343},
				expr: &charClassMatcher{
					pos:        position{line: 458, col: 5, offset: 10343},
					val:        "[ \\t\\r\\n]",
					chars:      []rune{' ', '\t', '\r', '\n'},
					ignoreCase: false,
					inverted:   false,
				},
			},
		},
	},
}

func (c *current) onReportFile1(rptsi, rest any) (any, error) {
	var rpt Report

	rpts := rptsi.([]any)
	for _, r := range rpts {
		switch v := r.(type) {
		case *TribeReport:
			rpt.T = append(rpt.T, v)
		default:
			rpt.T = append(rpt.T, &TribeReport{Errors: []error{fmt.Errorf("unknown type %T", v)}})
		}
	}

	rpt.Rest = rest.(string)

	return &rpt, nil
}

func (p *parser) callonReportFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReportFile1(stack["rptsi"], stack["rest"])
}

func (c *current) onUnitReport1(id, commonHeadingi, goodsTribe, gmNotes, tact, fact, tmove, smove, status, people, possessions, skills, morale, weight, truces, b any) (any, error) {
	var t TribeReport
	t.Id = id.(string)
	t.Bleet = b.(string)

	commonHeading := commonHeadingi.(*CommonHeading)
	t.Turn = commonHeading.Turn
	t.CurrentHex = commonHeading.CurrentHex
	t.StartingHex = commonHeading.StartingHex

	t.GoodsTribe = goodsTribe.(string)
	if gmNotes != nil {
		t.GMNotes = gmNotes.(string)
	}
	t.TribeActivities = tact.(*TribeActivities)
	if fact != nil {
		t.FinalActivities = fact.(*FinalActivities)
	}
	t.TribeMovement = tmove.(*TribeMovement)
	if smove != nil {
		t.ScoutMovement = smove.(*ScoutMovement)
	}
	t.UnitStatus = status.(*UnitStatus)
	t.People = people.(*People)
	if possessions != nil {
		t.Possessions = possessions.(*Possessions)
	}
	t.Skills = skills.(*Skills)
	t.Morale = morale.(*Morale)
	t.Weight = weight.(*Weight)
	if truces != nil {
		t.Truces = truces.(*Truces)
	}

	return &t, nil
}

func (p *parser) callonUnitReport1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnitReport1(stack["id"], stack["commonHeadingi"], stack["goodsTribe"], stack["gmNotes"], stack["tact"], stack["fact"], stack["tmove"], stack["smove"], stack["status"], stack["people"], stack["possessions"], stack["skills"], stack["morale"], stack["weight"], stack["truces"], stack["b"])
}

func (c *current) onCommonHeading1(currentHex, startingHex, turn any) (any, error) {
	var o CommonHeading
	o.CurrentHex = currentHex.(string)
	o.StartingHex = startingHex.(string)
	o.Turn = turn.(string)
	return &o, nil
}

func (p *parser) callonCommonHeading1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCommonHeading1(stack["currentHex"], stack["startingHex"], stack["turn"])
}

func (c *current) onClanHeading1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonClanHeading1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClanHeading1()
}

func (c *current) onGoodsTribe1(id any) (any, error) {
	switch v := id.(type) {
	case []uint8:
		if bytes.Equal(v, []byte("No GT")) {
			return "", nil
		}
		return string(v), nil
	case string:
		if v == "No GT" {
			return "", nil
		}
		return v, nil
	default:
		return id, fmt.Errorf("unknown type %T", v)
	}
}

func (p *parser) callonGoodsTribe1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGoodsTribe1(stack["id"])
}

func (c *current) onDesiredCommodities1(c1, c2 any) (any, error) {
	s1 := c1.(string)
	s2 := c2.(string)
	return []string{s1, s2}, nil
}

func (p *parser) callonDesiredCommodities1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDesiredCommodities1(stack["c1"], stack["c2"])
}

func (c *current) onGMNotes1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonGMNotes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGMNotes1()
}

func (c *current) onTribeActivities1() (any, error) {
	var t TribeActivities
	t.Bleet = string(c.text)
	return &t, nil
}

func (p *parser) callonTribeActivities1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeActivities1()
}

func (c *current) onFinalActivities1(bleet any) (any, error) {
	var t *FinalActivities
	if strings.TrimSpace(bleet.(string)) != "" {
		t = &FinalActivities{
			Bleet: bleet.(string),
		}
	}
	return t, nil
}

func (p *parser) callonFinalActivities1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFinalActivities1(stack["bleet"])
}

func (c *current) onuntilTribeMovement1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonuntilTribeMovement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuntilTribeMovement1()
}

func (c *current) onTribeMovement2(movesi any) (any, error) {
	var t TribeMovement
	if movesi != nil {
		moves := movesi.([]*Movement)
		for _, move := range moves {
			if move != nil {
				t.Movement = append(t.Movement, move)
			}
		}
	}
	return &t, nil
}

func (p *parser) callonTribeMovement2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeMovement2(stack["movesi"])
}

func (c *current) onTribeMovement11(id any) (any, error) {
	return &TribeMovement{Follows: id.(string)}, nil
}

func (p *parser) callonTribeMovement11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTribeMovement11(stack["id"])
}

func (c *current) onMoves1(movesi any) (any, error) {
	var o []*Movement
	if movesi != nil {
		moves := movesi.([]any)
		for _, move := range moves {
			o = append(o, move.(*Movement))
		}
	}
	return o, nil
}

func (p *parser) callonMoves1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMoves1(stack["movesi"])
}

func (c *current) onvalidMove2(move any) (any, error) {
	return move, nil
}

func (p *parser) callonvalidMove2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidMove2(stack["move"])
}

func (c *current) onvalidMove5(move any) (any, error) {
	return move, nil
}

func (p *parser) callonvalidMove5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidMove5(stack["move"])
}

func (c *current) onvalidMove8(move any) (any, error) {
	return move, nil
}

func (p *parser) callonvalidMove8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onvalidMove8(stack["move"])
}

func (c *current) onfailedMove1() (any, error) {
	return &Movement{Failed: true, Info: strings.TrimSpace(string(c.text))}, nil
}

func (p *parser) callonfailedMove1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onfailedMove1()
}

func (c *current) onsuccessfulMove1(direction, terrain, mi any) (any, error) {
	var o Movement
	o.Direction = direction.(string)
	o.Terrain = terrain.(string)
	if mi != nil {
		o.Info = mi.(string)
	}
	// log.Printf("successfulMove: %+v\n", o)
	return &o, nil
}

func (p *parser) callonsuccessfulMove1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onsuccessfulMove1(stack["direction"], stack["terrain"], stack["mi"])
}

func (c *current) onstillMove1() (any, error) {
	// an empty move means stay still
	return &Movement{Stay: true}, nil
}

func (p *parser) callonstillMove1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onstillMove1()
}

func (c *current) onoptMoveInfo1(moveInfo any) (any, error) {
	// log.Printf("optMoveInfo %q\n", moveInfo)
	return moveInfo, nil
}

func (p *parser) callonoptMoveInfo1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onoptMoveInfo1(stack["moveInfo"])
}

func (c *current) onuntilStatusOrScout1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonuntilStatusOrScout1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuntilStatusOrScout1()
}

func (c *current) onScoutMovement1() (any, error) {
	var t ScoutMovement
	t.Bleet = string(c.text)
	return &t, nil
}

func (p *parser) callonScoutMovement1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScoutMovement1()
}

func (c *current) onUnitStatus1(id, terrain, bleet any) (any, error) {
	var o UnitStatus
	o.Id = id.(string)
	o.Terrain = terrain.(string)
	o.Bleet = bleet.(string)
	return &o, nil
}

func (p *parser) callonUnitStatus1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnitStatus1(stack["id"], stack["terrain"], stack["bleet"])
}

func (c *current) onuntilHumans1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonuntilHumans1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onuntilHumans1()
}

func (c *current) onHumans1(totalPeople, warriors, active, inactive any) (any, error) {
	var o People
	total, err := atoi(totalPeople.(string))
	if o.Warriors, err = atoi(warriors.(string)); err != nil {
		return &o, err
	}
	if o.Active, err = atoi(active.(string)); err != nil {
		return &o, err
	}
	if o.Inactive, err = atoi(inactive.(string)); err != nil {
		return &o, err
	}
	if o.Warriors+o.Active+o.Inactive != total {
		return &o, fmt.Errorf("totals does not match")
	}
	return &o, nil
}

func (p *parser) callonHumans1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHumans1(stack["totalPeople"], stack["warriors"], stack["active"], stack["inactive"])
}

func (c *current) onPossessions1(animals, minerals, warEquipment, finishedGoods, rawMaterials, ships any) (any, error) {
	var o Possessions
	o.Animals = animals.(*Animals)
	o.Minerals = minerals.(*Minerals)
	o.WarEquipment = warEquipment.(*WarEquipment)
	o.FinishedGoods = finishedGoods.(*FinishedGoods)
	o.RawMaterials = rawMaterials.(*RawMaterials)
	o.Ships = ships.(*Ships)
	return &o, nil
}

func (p *parser) callonPossessions1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPossessions1(stack["animals"], stack["minerals"], stack["warEquipment"], stack["finishedGoods"], stack["rawMaterials"], stack["ships"])
}

func (c *current) onAnimals1() (any, error) {
	var o Animals
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonAnimals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnimals1()
}

func (c *current) onMinerals1() (any, error) {
	var o Minerals
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonMinerals1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMinerals1()
}

func (c *current) onWarEquipment1() (any, error) {
	var o WarEquipment
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonWarEquipment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWarEquipment1()
}

func (c *current) onFinishedGoods1() (any, error) {
	var o FinishedGoods
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonFinishedGoods1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFinishedGoods1()
}

func (c *current) onRawMaterials1() (any, error) {
	var o RawMaterials
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonRawMaterials1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRawMaterials1()
}

func (c *current) onShips1() (any, error) {
	var o Ships
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonShips1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onShips1()
}

func (c *current) onSkills1() (any, error) {
	var o Skills
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonSkills1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSkills1()
}

func (c *current) onMorale1() (any, error) {
	var o Morale
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonMorale1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMorale1()
}

func (c *current) onWeight1() (any, error) {
	var o Weight
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonWeight1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWeight1()
}

func (c *current) onTruces1() (any, error) {
	var o Truces
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonTruces1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTruces1()
}

func (c *current) onTransfers1() (any, error) {
	var o Transfers
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonTransfers1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTransfers1()
}

func (c *current) onSettlements1() (any, error) {
	var o Settlements
	o.Bleet = string(c.text)
	return &o, nil
}

func (p *parser) callonSettlements1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSettlements1()
}

func (c *current) onBLEET1() (any, error) {
	bleet := string(c.text)
	return bleet, nil
}

func (p *parser) callonBLEET1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBLEET1()
}

func (c *current) onCOMMODITY2() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOMMODITY2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMODITY2()
}

func (c *current) onCOMMODITY4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOMMODITY4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOMMODITY4()
}

func (c *current) onCOURIERID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCOURIERID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCOURIERID1()
}

func (c *current) onDDMMYYYY1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDDMMYYYY1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDDMMYYYY1()
}

func (c *current) onDIRECTION1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonDIRECTION1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDIRECTION1()
}

func (c *current) onELEMENTID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonELEMENTID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onELEMENTID1()
}

func (c *current) onHEXID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonHEXID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHEXID1()
}

func (c *current) onMONTHID1() (any, error) {
	return string(c.text[1:]), nil
}

func (p *parser) callonMONTHID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMONTHID1()
}

func (c *current) onNUMBER1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonNUMBER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNUMBER1()
}

func (c *current) onOPTMOVEINFO1() (any, error) {
	return strings.TrimSpace(string(c.text)), nil
}

func (p *parser) callonOPTMOVEINFO1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onOPTMOVEINFO1()
}

func (c *current) onREST1() (any, error) {
	rest := string(c.text)
	return rest, nil
}

func (p *parser) callonREST1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onREST1()
}

func (c *current) onSEASON4() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSEASON4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSEASON4()
}

func (c *current) onTERRAIN1() (any, error) {
	s := string(c.text)
	switch s {
	case "CH", "CONIFER HILLS":
		return "CH", nil
	case "GH", "GRASSY HILLS":
		return "GH", nil
	case "O", "OCEAN", "Ocean":
		return "O", nil
	case "PR", "PRAIRIE":
		return "PR", nil
	case "R", "RIVER":
		return "R", nil
	case "RH", "ROCKY HILLS":
		return "RH", nil
	case "SW", "SWAMP":
		return "SW", nil
	default:
		return string(c.text), fmt.Errorf("unknown terrain")
	}
}

func (p *parser) callonTERRAIN1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTERRAIN1()
}

func (c *current) onTRIBEID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTRIBEID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTRIBEID1()
}

func (c *current) onTURNID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonTURNID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTURNID1()
}

func (c *current) onUNITID1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUNITID1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUNITID1()
}

func (c *current) onWEATHER1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWEATHER1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWEATHER1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
